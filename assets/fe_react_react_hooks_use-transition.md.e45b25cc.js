import{_ as a,c as s,o as t,U as n}from"./chunks/framework.e548c890.js";const A=JSON.parse('{"title":"useTransition","description":"","frontmatter":{},"headers":[],"relativePath":"fe/react/react/hooks/use-transition.md","filePath":"fe/react/react/hooks/use-transition.md","lastUpdated":1702821351000}'),e={name:"fe/react/react/hooks/use-transition.md"},i=n('<h1 id="usetransition" tabindex="-1">useTransition <a class="header-anchor" href="#usetransition" aria-label="Permalink to &quot;useTransition&quot;">​</a></h1><p>更新状态时不阻塞 UI。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">isPending</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> startTransition</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useTransition</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>返回值：</p><ul><li><code>isPending</code>：是否有进行中的 transition</li><li><code>startTransition</code>：标记状态更新为 transition</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">startTransition</span><span style="color:#A6ACCD;">(scope)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>参数：</p><ul><li><code>scope</code>：包含立即执行的同步 <code>setState</code> 语句，React 会把这些状态更新标记为 transition</li></ul><h2 id="transition" tabindex="-1">transition <a class="header-anchor" href="#transition" aria-label="Permalink to &quot;transition&quot;">​</a></h2><ul><li>标记为 transition 的状态更新可以被其他状态更新中断，其他状态更新完毕后再重新开始 transition 的更新</li><li>如果有多个 transition 同时进行，React 会合并这些更新，未来版本可能移除该特性</li><li>transition 不会触发 <code>&lt;Suspense&gt;</code> 的 <code>fallback</code></li><li>transition 不支持 <code>&lt;input&gt;</code> 文本的更新，因为这种操作必须是同步的 <ul><li>可以声明两个状态，一个同步更新，另一个使用 transition 且与应用其他逻辑连接</li><li>可以只声明一个状态，然后用 <code>useDeferredValue</code> 声明并使用一个推迟更新的状态</li></ul></li></ul><h2 id="用途" tabindex="-1">用途 <a class="header-anchor" href="#用途" aria-label="Permalink to &quot;用途&quot;">​</a></h2><ul><li>在低端设备上保持 UI 的可响应性 <ul><li>比如用户点击某个 tab 耗时很长，想要切换到另一个 tab <ul><li>使用 transition 可以立即开始切换到另一个 tab</li><li>不使用 transition 需要等待前一个 tab 渲染完成后再切换到下一个</li></ul></li></ul></li><li>路由库的页面导航推荐使用 transition <ul><li>方便用户随意切换页面</li><li>避免出现 loading 界面</li></ul></li></ul>',12),o=[i];function l(r,c,p,d,u,h){return t(),s("div",null,o)}const D=a(e,[["render",l]]);export{A as __pageData,D as default};
