import{_ as e,c as o,o as l,U as t}from"./chunks/framework.e548c890.js";const h=JSON.parse('{"title":"性能","description":"","frontmatter":{},"headers":[],"relativePath":"fe/desktop/electron/performance.md","filePath":"fe/desktop/electron/performance.md","lastUpdated":1704115023000}'),r={name:"fe/desktop/electron/performance.md"},a=t('<h1 id="性能" tabindex="-1">性能 <a class="header-anchor" href="#性能" aria-label="Permalink to &quot;性能&quot;">​</a></h1><p>性能：保证安全的基础上，尽可能减少用户交互的响应时间，同时尽可能降低 CPU、内存、磁盘的使用量。</p><p>Electron 性能可以分为前端、Node、Electron 三部分，前两部分的性能优化与非 Electron 应用是通用的，但要注意 Node 服务端和客户端对性能的侧重点不同，比如客户端对冷启速度的要求更高。</p><p>性能优化的基本思想是测量目前代码的 CPU、内存使用情况，找到耗时长、内存高的瓶颈代码，针对性地进行优化。</p><ul><li>Chrome DevTools Performance</li><li>Perfetto</li></ul><p>Electron 应用可能的性能优化点：</p><ol><li>谨慎引入依赖</li><li>推迟不必要的冷启操作</li><li>避免阻塞主进程</li><li>避免阻塞渲染进程</li><li>谨慎引入 polyfill</li><li>减少网络请求，避免耗时过长的请求</li><li>打包项目代码，而不是原始的多个 ESM</li><li>如果不需要 Electron 默认菜单，调用 <code>Menu.setApplicationMenu(null)</code></li></ol>',7),i=[a];function n(c,p,s,_,d,f){return l(),o("div",null,i)}const u=e(r,[["render",n]]);export{h as __pageData,u as default};
