import{_ as s,c as i,o as a,a1 as e}from"./chunks/framework.mNpZ2GHZ.js";const n="/assets/node-event-loop.CZjAxvCg.png",y=JSON.parse('{"title":"Node 事件循环","description":"","frontmatter":{},"headers":[],"relativePath":"fe/node/event-loop.md","filePath":"fe/node/event-loop.md","lastUpdated":1683687303000}'),l={name:"fe/node/event-loop.md"},t=e('<h1 id="node-事件循环" tabindex="-1">Node 事件循环 <a class="header-anchor" href="#node-事件循环" aria-label="Permalink to &quot;Node 事件循环&quot;">​</a></h1><p>Node 事件循环有以下 6 个阶段 (phase)：</p><ol><li><strong>timers</strong><ul><li><code>setTimeout</code></li><li><code>setInterval</code></li></ul></li><li><strong>pending callbacks</strong><ul><li>推迟到下次循环的 I/O 回调</li><li>比如 TCP 错误 <code>ECONNREFUSED</code></li></ul></li><li><strong>idle, prepare</strong><ul><li>Node 内部使用</li></ul></li><li><strong>poll</strong><ul><li>其他所有 I/O 回调</li></ul></li><li><strong>check</strong><ul><li><code>setImmediate</code></li><li>用于在 <code>poll</code> 阶段之后执行回调</li></ul></li><li><strong>close callbacks</strong><ul><li>关闭回调</li><li>比如 <code>socket.on(&#39;close&#39;, ...)</code></li></ul></li></ol><img src="'+n+`" style="zoom:50%;"><h2 id="poll" tabindex="-1">poll <a class="header-anchor" href="#poll" aria-label="Permalink to &quot;poll&quot;">​</a></h2><p><code>poll</code> 阶段的 2 个主要功能：</p><ol><li>计算本次轮询的时间限制</li><li>执行 <code>poll queue</code> 里的回调</li></ol><p>处理流程：</p><ol><li><code>poll queue</code> 非空 <ol><li>依次、同步执行队列里的回调，直到队列为空或达到时间限制</li></ol></li><li><code>poll queue</code> 为空 <ol><li>有 <code>setImmediate</code> 回调 <ol><li>结束 <code>poll</code> 阶段，进入 <code>check</code> 阶段</li></ol></li><li>无 <code>setImmediate</code> 回调 <ol><li>阻塞等待，直到队列不为空并执行回调或达到时间限制</li></ol></li></ol></li></ol><p>一旦 <code>poll queue</code> 为空，Node 就会检查是否有 timer 时间到了，如果有，就退出 <code>poll</code> 阶段。</p><h2 id="setimmediate" tabindex="-1">setImmediate <a class="header-anchor" href="#setimmediate" aria-label="Permalink to &quot;setImmediate&quot;">​</a></h2><p>执行顺序不确定</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// timeout_vs_immediate.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;timeout&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;immediate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ node timeout_vs_immediate.js</span></span>
<span class="line"><span>timeout</span></span>
<span class="line"><span>immediate</span></span>
<span class="line"><span></span></span>
<span class="line"><span>$ node timeout_vs_immediate.js</span></span>
<span class="line"><span>immediate</span></span>
<span class="line"><span>timeout</span></span></code></pre></div><p>总是先执行 <code>setImmediate</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// timeout_vs_immediate.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__filename, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;timeout&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;immediate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ node timeout_vs_immediate.js</span></span>
<span class="line"><span>immediate</span></span>
<span class="line"><span>timeout</span></span>
<span class="line"><span></span></span>
<span class="line"><span>$ node timeout_vs_immediate.js</span></span>
<span class="line"><span>immediate</span></span>
<span class="line"><span>timeout</span></span></code></pre></div><h2 id="process-nexttick" tabindex="-1">process.nextTick <a class="header-anchor" href="#process-nexttick" aria-label="Permalink to &quot;process.nextTick&quot;">​</a></h2><p><code>process.nextTick</code> 注册的回调将会在当前操作完成<strong>后</strong>、事件循环进入下一个阶段<strong>前</strong>立即执行，不管位于哪个阶段。</p><p>有可能阻塞事件循环，比如在其他阶段 <code>nextTickQueue</code> 的回调过多，导致迟迟不能进入 <code>poll</code> 阶段。</p><p>真实案例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;connection&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">conn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;listening&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {});</span></span></code></pre></div><ul><li><code>.listen(8080)</code> 会立即完成并触发 <code>listening</code> 事件，引发一些不符合预期的行为 <ul><li><code>listening</code> 的事件处理函数还没有注册，导致无法触发回调</li><li>有可能马上建立连接并触发 <code>connection</code> 事件并执行回调，早于 <code>listening</code> 的回调</li></ul></li><li>事件通过 <code>process.nextTick</code> 注册，使所有事件处理函数注册完之后再执行事件回调</li></ul><p>总结：</p><ul><li>推荐开发者使用 <code>setImmediate</code> 而不是 <code>process.nextTick</code>，因为前者更简单。</li><li><code>process.nextTick</code> 主要用于在事件循环继续之前执行一些操作，比如处理错误、清理资源。</li></ul>`,25),p=[t];function h(k,d,o,c,E,r){return a(),i("div",null,p)}const m=s(l,[["render",h]]);export{y as __pageData,m as default};
