import{_ as i,c as s,o as a,a1 as l}from"./chunks/framework.mNpZ2GHZ.js";const g=JSON.parse('{"title":"useRequest","description":"","frontmatter":{},"headers":[],"relativePath":"fe/react/fetch/use-request.md","filePath":"fe/react/fetch/use-request.md","lastUpdated":1720354129000}'),e={name:"fe/react/fetch/use-request.md"},t=l(`<h1 id="userequest" tabindex="-1">useRequest <a class="header-anchor" href="#userequest" aria-label="Permalink to &quot;useRequest&quot;">​</a></h1><p>useRequest 是 ahooks 提供的网络请求 hook，也是这个库最知名的 hook。</p><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ahooks</span></span></code></pre></div><h2 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;基本用法&quot;">​</a></h2><p>自动请求：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 传入一个返回 Promise 的函数，hook 执行时自动发起请求</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mutate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(getUsername);</span></span></code></pre></div><ul><li>data: resolve 结果，请求失败为 undefined</li><li>error: reject 结果，请求成功为 undefined</li><li>loading: 是否正在执行请求</li></ul><p>手动请求：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不会自动请求，手动调用 run 函数发起请求</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">runAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(getUsername, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  manual: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><ul><li>run: 发起请求的同步函数，内部会自动捕获异常，在 onError 中处理</li><li>runAsync：返回 Promise 的异步函数，需要自己处理异常</li></ul><p>其他解构项：</p><ul><li>refresh：用上一次请求的参数重新发起请求</li><li>refreshAsync：异步版本</li><li>mutate：直接修改 data，类似 setState，尽快给用户反馈，而不是等请求完成后再更新页面</li><li>cancel：忽略请求结果，用于组件卸载、上次请求还没完成又发起了新的请求</li><li>params：当前调用请求函数的参数列表</li></ul><h2 id="配置项" tabindex="-1">配置项 <a class="header-anchor" href="#配置项" aria-label="Permalink to &quot;配置项&quot;">​</a></h2><p>自动/手动请求：</p><ul><li>manual：是否手动请求</li><li>ready：是否准备好请求了，为 false 永远不会执行请求</li></ul><p>生命周期：</p><ul><li>onBefore：请求之前</li><li>onSuccess：请求成功</li><li>onError：请求失败</li><li>onFinally：请求完成</li></ul><p>请求参数：</p><ul><li>defaultParams：调用请求函数的默认参数</li></ul><p>延迟 loading：</p><ul><li>loadingDelay：延迟 loading 变为 true 的时间 <ul><li>如果请求时间很短，就没必要展示 loading，可以避免页面闪烁</li></ul></li></ul><p>轮询：</p><ul><li>pollingInterval：定期执行请求，通过 cancel 停止轮询，通过 run/runAsync 启动轮询</li><li>pollingErrorRetryCount：轮询错误重试次数</li><li>pollingWhenHidden：页面不在可视范围内时是否停止轮询</li></ul><p>自定义依赖：</p><ul><li>refreshDeps：依赖列表，依赖变化时自动调用 refresh，可用于代替 useEffect</li><li>refreshDepsAction：依赖变化时的自定义行为</li></ul><p>屏幕聚焦重新请求：</p><ul><li>refreshOnWindowFocus：是否在屏幕聚焦时重新请求 <ul><li>监听 focus 和 visibilitychange</li></ul></li><li>focusTimespan：重新请求的间隔，默认 5000 ms</li></ul><p>防抖：</p><ul><li>debounceWait：防抖间隔</li><li>debounceLeading：是否在延迟开始前调用，默认 false</li><li>debounceTrailing：是否在延迟结束后调用，默认 true</li><li>debounceMaxWait：允许延迟的最多次数</li></ul><p>节流：</p><ul><li>throttleWait：节流间隔</li><li>throttleLeading：是否在间隔开始前调用，默认 true</li><li>throttleTrailing：是否在间隔结束后调用，默认 true</li></ul><p>缓存：</p><ul><li>cacheKey：缓存当前请求的数据（data、params），如果 key 不变化，就优先返回缓存数据，同时在后台发送新请求 <ul><li>全局共享：每个 cacheKey 同时只会有一个请求，请求成功后所有内容都会随之同步</li><li>clearCache 函数：清除指定 cacheKey 的缓存数据 <ul><li>支持字符串或字符串数组</li><li>参数为空表示清除全部缓存</li></ul></li></ul></li><li>staleTime：过期时间，该时间内请求缓存数据不会发起新请求</li><li>cacheTime：缓存时间，超过该时间删除缓存</li><li>setCache：自定义写入缓存逻辑，比如存储到 localStorage、IndexedDB</li><li>getCache：自定义读取缓存逻辑</li></ul><p>错误重试：</p><ul><li>retryCount：请求失败重试次数</li></ul>`,36),n=[t];function h(p,r,k,u,d,o){return a(),s("div",null,n)}const E=i(e,[["render",h]]);export{g as __pageData,E as default};
