import{_ as e,c as l,o as t,U as a}from"./chunks/framework.e548c890.js";const _=JSON.parse('{"title":"useEffect","description":"","frontmatter":{},"headers":[],"relativePath":"fe/react/react/hooks/use-effect.md","filePath":"fe/react/react/hooks/use-effect.md","lastUpdated":1702822707000}'),i={name:"fe/react/react/hooks/use-effect.md"},s=a('<h1 id="useeffect" tabindex="-1">useEffect <a class="header-anchor" href="#useeffect" aria-label="Permalink to &quot;useEffect&quot;">​</a></h1><p>将组件与外部系统进行同步。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">useEffect</span><span style="color:#A6ACCD;">(setup</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dependencies</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><ul><li>setup <ul><li>第一个参数传入</li><li>触发副作用，比如修改 DOM、建立订阅</li><li>在组件第一次挂载和每次更新时执行</li></ul></li><li>cleanup <ul><li>setup 函数的返回值</li><li>清除副作用，比如取消订阅、取消定时器</li><li>在每次更新和组件卸载时执行</li><li>更新时先执行 cleanup，后重新执行 setup</li></ul></li><li>dependencies <ul><li>依赖数组，只有依赖变化时才重新执行</li><li>依赖必须是响应式数据，也就是修改后会触发重新渲染的数据 <ul><li>prop、state、context 以及组件内依赖这些数据的值</li></ul></li><li>非响应式数据不能作为依赖，React 不追踪这些数据的更新，修改他们不会触发重新渲染 <ul><li><code>ref.current</code>、<code>location.pathname</code> 等</li></ul></li><li>依赖列表必须包含 effect 用到的所有响应式数据，开发者没有选择的余地</li><li>如果依赖列表不符合预期，则首先修改 effect 代码逻辑，然后更新列表 <ul><li>依赖只是逻辑的反映，不能凭空修改依赖列表</li></ul></li><li>对于在 effect 内更新状态用到了旧状态的情况，完全没必要将旧状态作为依赖，而是向 <code>setState</code> 传入更新函数，通过函数参数获取旧状态</li><li>由于每次创建的对象和函数都不相同，因此要避免使用组件内的对象和函数作为依赖，应该将对象和函数移到组件外或 effect 内</li></ul></li></ul><h2 id="event-handler" tabindex="-1">event handler <a class="header-anchor" href="#event-handler" aria-label="Permalink to &quot;event handler&quot;">​</a></h2><ul><li>event handler <ul><li>事件发生时手动执行</li><li>可能用到响应式数据，但是数据更新时不会重新执行</li></ul></li><li>effect <ul><li>响应式依赖变化时自动重新执行</li></ul></li></ul>',6),c=[s];function n(o,r,u,p,f,d){return t(),l("div",null,c)}const m=e(i,[["render",n]]);export{_ as __pageData,m as default};
