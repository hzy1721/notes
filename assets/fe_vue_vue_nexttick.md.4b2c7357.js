import{_ as s,c as a,o as n,U as o}from"./chunks/framework.e548c890.js";const d=JSON.parse('{"title":"nextTick","description":"","frontmatter":{},"headers":[],"relativePath":"fe/vue/vue/nexttick.md","filePath":"fe/vue/vue/nexttick.md","lastUpdated":1702821351000}'),e={name:"fe/vue/vue/nexttick.md"},l=o(`<h1 id="nexttick" tabindex="-1">nextTick <a class="header-anchor" href="#nexttick" aria-label="Permalink to &quot;nextTick&quot;">​</a></h1><p>更改响应式状态后，DOM 不会立即更新，而是与其他状态改变一起进行批量更新。</p><p>确保连续多次的状态改变，最终只更新一次 DOM，避免影响性能。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">nextTick</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">callback</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">&gt;;</span></span></code></pre></div><p><code>nextTick</code> 有 2 种用法：</p><ul><li>传入 <code>callback</code> 参数指定下一次 DOM 更新后执行的回调函数</li><li>await 返回的 promise，在后面的代码中访问更新后的 DOM</li></ul><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">$nextTick</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">callback</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">this</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><code>$nextTick</code> 与 <code>nextTick</code> 的唯一区别是：传递给 <code>$nextTick</code> 的回调函数会自动绑定 <code>this</code> 为当前组件实例。</p>`,8),t=[l];function p(c,r,i,F,D,y){return n(),a("div",null,t)}const A=s(e,[["render",p]]);export{d as __pageData,A as default};
