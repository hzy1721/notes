import{_ as a,c as t,o as e,U as s}from"./chunks/framework.e548c890.js";const _=JSON.parse('{"title":"类型工具","description":"","frontmatter":{},"headers":[],"relativePath":"fe/lang/ts/tools.md","filePath":"fe/lang/ts/tools.md","lastUpdated":1704115023000}'),o={name:"fe/lang/ts/tools.md"},l=s(`<h1 id="类型工具" tabindex="-1">类型工具 <a class="header-anchor" href="#类型工具" aria-label="Permalink to &quot;类型工具&quot;">​</a></h1><h2 id="联合" tabindex="-1">联合 <a class="header-anchor" href="#联合" aria-label="Permalink to &quot;联合&quot;">​</a></h2><ul><li><code>T1 | T2 | ...</code></li></ul><p>只能访问所有类型公共的属性和方法。</p><h2 id="交叉" tabindex="-1">交叉 <a class="header-anchor" href="#交叉" aria-label="Permalink to &quot;交叉&quot;">​</a></h2><ul><li><code>T1 &amp; T2 &amp; ...</code></li></ul><p>最终类型为所有类型合并后的属性和方法。</p><h2 id="别名" tabindex="-1">别名 <a class="header-anchor" href="#别名" aria-label="Permalink to &quot;别名&quot;">​</a></h2><p>使用 <code>type</code> 给已有类型起个新名字。</p><ul><li><code>type NewType = ...</code></li></ul><h2 id="接口" tabindex="-1">接口 <a class="header-anchor" href="#接口" aria-label="Permalink to &quot;接口&quot;">​</a></h2><p>给对象类型起个新名字。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Point</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><table><thead><tr><th>区别</th><th>interface</th><th>type</th></tr></thead><tbody><tr><td>继承</td><td>extends</td><td>交叉</td></tr><tr><td>扩展</td><td>允许重复声明</td><td>不支持</td></tr><tr><td>原始类型</td><td>不支持</td><td>支持</td></tr><tr><td>错误信息</td><td>保持名称</td><td>替换为等价类型</td></tr></tbody></table><h2 id="断言" tabindex="-1">断言 <a class="header-anchor" href="#断言" aria-label="Permalink to &quot;断言&quot;">​</a></h2><p>强制更改类型。</p><ul><li><code>xxx as xxx</code></li><li><code>xxx as const</code>：转为字面量</li><li><code>!</code>：非空断言，把 <code>null</code>、<code>undefined</code> 部分去掉</li></ul><p>只允许断言为不同层级的类型，如果想断言为同级类型，可以用 <code>any</code> 中转一下。</p>`,18),n=[l];function d(r,c,p,i,h,u){return e(),t("div",null,n)}const m=a(o,[["render",d]]);export{_ as __pageData,m as default};
