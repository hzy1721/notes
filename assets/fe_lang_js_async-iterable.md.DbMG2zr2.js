import{_ as e,c as a,o as t,a1 as c}from"./chunks/framework.mNpZ2GHZ.js";const m=JSON.parse('{"title":"async iterable","description":"","frontmatter":{},"headers":[],"relativePath":"fe/lang/js/async-iterable.md","filePath":"fe/lang/js/async-iterable.md","lastUpdated":1720354129000}'),o={name:"fe/lang/js/async-iterable.md"},r=c('<h1 id="async-iterable" tabindex="-1">async iterable <a class="header-anchor" href="#async-iterable" aria-label="Permalink to &quot;async iterable&quot;">​</a></h1><p>类似 iterable，区别是 <code>next()</code> 返回的 <code>value</code> 是 Promise，可以用于 <code>for await...of</code>。</p><p>遵循 async iterable 的对象需要实现 <code>[Symbol.asyncIterator]</code> 方法，返回的迭代器对象遵循 async iterator，其拥有的 <code>next()</code> 方法返回的 <code>value</code> 是一个 Promise。</p>',3),s=[r];function n(i,l,d,_,p,b){return t(),a("div",null,s)}const y=e(o,[["render",n]]);export{m as __pageData,y as default};
