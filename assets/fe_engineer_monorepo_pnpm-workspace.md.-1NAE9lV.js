import{_ as a,c as e,o as s,a1 as i}from"./chunks/framework.mNpZ2GHZ.js";const u=JSON.parse('{"title":"pnpm workspace","description":"","frontmatter":{},"headers":[],"relativePath":"fe/engineer/monorepo/pnpm-workspace.md","filePath":"fe/engineer/monorepo/pnpm-workspace.md","lastUpdated":1720711669000}'),p={name:"fe/engineer/monorepo/pnpm-workspace.md"},o=i(`<h1 id="pnpm-workspace" tabindex="-1">pnpm workspace <a class="header-anchor" href="#pnpm-workspace" aria-label="Permalink to &quot;pnpm workspace&quot;">​</a></h1><ul><li>workspace：包含多个包的 monorepo <ul><li>根目录必须有 <code>pnpm-workspace.yaml</code>、可能有 <code>.npmrc</code></li></ul></li><li><code>pnpm-workspace.yaml</code>：workspace 配置文件，用于指定本地包</li><li><code>.npmrc</code>：npm 配置文件，也包括了 workspace 的部分配置</li><li><code>workspace:</code> 协议：类似于 <code>&quot;local-pack&quot;: &quot;workspace:*&quot;</code> 的协议 <ul><li>在 <code>.npmrc</code> 启用 <code>link-workspace-packages</code> 后，可以通过该协议引用本地包</li><li>背景：如果不使用 <code>workspace:</code> 协议引用一个包，且这个包没有在 <code>pnpm-workspace.yaml</code> 声明，安装时就会从 registry 下载，而不是链接本地包</li><li>该协议可以强制引用本地包，避免走 registry</li><li>别名引用：<code>&quot;aliasName&quot;: &quot;workspace:local-pack@*&quot;</code></li><li>相对路径引用：<code>&quot;local-pack&quot;: &quot;workspace:../local-pack&quot;</code></li><li>版本号前缀 (同 npm)： <ul><li><code>workspace:*</code>：最新版本</li><li><code>workspace:~</code>：major/minor 不变，patch 可以变</li><li><code>workspace:^</code>：major 不变，minor/patch 可以变</li></ul></li></ul></li></ul><h2 id="pnpm-workspace-yaml" tabindex="-1">pnpm-workspace.yaml <a class="header-anchor" href="#pnpm-workspace-yaml" aria-label="Permalink to &quot;pnpm-workspace.yaml&quot;">​</a></h2><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">packages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # all packages in direct subdirs of packages/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;packages/*&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # all packages in subdirs of components/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;components/**&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # exclude packages that are inside test directories</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;!**/test/**&#39;</span></span></code></pre></div>`,4),l=[o];function c(n,t,r,k,d,h){return s(),e("div",null,l)}const g=a(p,[["render",c]]);export{u as __pageData,g as default};
