import{_ as s,c as n,o as a,a as l}from"./app.1db0b35b.js";const C=JSON.parse('{"title":"233. 数字 1 的个数","description":"","frontmatter":{},"headers":[],"relativePath":"code/algorithm/233.md"}'),p={name:"code/algorithm/233.md"},o=l(`<h1 id="_233-数字-1-的个数" tabindex="-1"><a href="https://leetcode.cn/problems/number-of-digit-one/" target="_blank" rel="noreferrer">233. 数字 1 的个数</a> <a class="header-anchor" href="#_233-数字-1-的个数" aria-hidden="true">#</a></h1><p>可以依次计算每一位上 1 出现的次数然后累加，n 最大为 $10^9$，所以最多需要累加 10 次。</p><p>以百位为例，每隔 1000 个数，百位上的 1 都会出现 100 次，十位和个位在 [0, 99] 之间变化，因此可以得到规律：</p><ul><li>从右往左第 k 位 (k 从 <strong>0</strong> 开始)，每隔 $10^{k+1}$ 个数，这一位上的 1 会出现 $10^k$ 次</li><li>对于不够 $10^{k+1}$ 周期的剩余数，可以计算其与 $10^k$ 的差，比如： <ul><li>12045 中百位剩余 45 &lt; 100，1 出现的次数为 0</li><li>12145 中百位剩余 100 &lt;= 145 &lt; 200，1 出现的次数为 145 - 100 + 1 = 46</li><li>12345 中百位剩余 345 &gt;= 200，1 出现的次数为 100</li></ul></li></ul><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Solution</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">countDigitOne</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">n</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">long</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">long</span><span style="color:#F07178;"> powk </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1LL</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> ans </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">powk </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#F07178;"> n</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            ans </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> n </span><span style="color:#89DDFF;">/</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">powk </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> powk</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            ans </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">min</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">max</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">n </span><span style="color:#89DDFF;">%</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">powk </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> powk </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0LL</span><span style="color:#89DDFF;">),</span><span style="color:#F07178;"> powk</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">            powk </span><span style="color:#89DDFF;">*=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> ans</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div>`,5),e=[o];function t(c,r,F,y,D,i){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{C as __pageData,d as default};
