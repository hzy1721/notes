import{_ as s,c as e,o as t,a1 as a}from"./chunks/framework.mNpZ2GHZ.js";const g=JSON.parse('{"title":"useContext","description":"","frontmatter":{},"headers":[],"relativePath":"fe/react/react/hooks/use-context.md","filePath":"fe/react/react/hooks/use-context.md","lastUpdated":1702822707000}'),i={name:"fe/react/react/hooks/use-context.md"},l=a('<h1 id="usecontext" tabindex="-1">useContext <a class="header-anchor" href="#usecontext" aria-label="Permalink to &quot;useContext&quot;">​</a></h1><p>传递数据给下层组件。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SomeContext);</span></span></code></pre></div><h2 id="context" tabindex="-1">context <a class="header-anchor" href="#context" aria-label="Permalink to &quot;context&quot;">​</a></h2><p>某些情况下通过 prop 传递数据会很麻烦：</p><ul><li>透过多层组件传递数据给深层组件</li><li>多个下层组件需要相同的数据</li></ul><p>context 可以解决这个问题：</p><ol><li>使用 <code>createContext</code> 创建一个 context，提供默认值</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SomeContext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(defaultValue);</span></span></code></pre></div><ol start="2"><li>提供数据的组件内，用 <code>SomeContext.Provider</code> 包裹子元素，通过 <code>value</code> 属性提供数据</li></ol><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SomeContext.Provider</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{value}&gt;{</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 后代组件 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SomeContext.Provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ol start="3"><li>接收数据的后代组件内，用 <code>useContext(SomeContext)</code> 得到数据</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SomeContext);</span></span></code></pre></div><h2 id="结合-reducer" tabindex="-1">结合 reducer <a class="header-anchor" href="#结合-reducer" aria-label="Permalink to &quot;结合 reducer&quot;">​</a></h2><p>对于一些复杂状态的管理会用到 reducer，context 提供了传递数据的能力，只需要传递 <code>useReducer</code> 返回的 <code>state</code> 和 <code>dispatch</code> 即可实现后代组件对复杂状态的共享读写。</p><p>类似的，对于一些简单的状态则传递 <code>useState</code> 返回的 <code>state</code> 和 <code>setState</code>。</p><h2 id="用途" tabindex="-1">用途 <a class="header-anchor" href="#用途" aria-label="Permalink to &quot;用途&quot;">​</a></h2><ol><li>主题切换，比如暗黑模式</li><li>当前登录的用户信息</li><li>当前路由信息，路由库会用到</li></ol>',18),n=[l];function o(h,d,p,c,r,k){return t(),e("div",null,n)}const x=s(i,[["render",o]]);export{g as __pageData,x as default};
