import{_ as e,c as i,o as l,d as t}from"./app.01ac5356.js";const h=JSON.parse('{"title":"CSRF","description":"","frontmatter":{},"headers":[{"level":2,"title":"防御措施","slug":"防御措施","link":"#防御措施","children":[]}],"relativePath":"fe/optimization/security/csrf.md","lastUpdated":1681116875000}'),o={name:"fe/optimization/security/csrf.md"},r=t('<h1 id="csrf" tabindex="-1">CSRF <a class="header-anchor" href="#csrf" aria-hidden="true">#</a></h1><p>CSRF (Cross-Site Request Forgery，跨站请求伪造) 是指诱导用户发送带有 Cookie 的伪造请求，完成用户授权操作。</p><p>CSRF 有以下类型：</p><ul><li>GET 请求 <ul><li><code>&lt;a&gt;</code> 标签</li><li><code>&lt;img&gt;</code> 标签</li></ul></li><li>POST 请求 <ul><li><code>&lt;form&gt;</code> 表单</li></ul></li><li>iframe 攻击 <ul><li>iframe 隐藏，上面覆盖 pointer-events 为 none 的 button</li><li>iframe 点击后发起伪造的同源请求</li></ul></li></ul><h2 id="防御措施" tabindex="-1">防御措施 <a class="header-anchor" href="#防御措施" aria-hidden="true">#</a></h2><ul><li>减少在 Cookie 中存储重要信息，使用 <code>SameSite</code> Cookie</li><li>限制请求来源 <ul><li>校验 <code>Origin</code> 和 <code>Referer</code></li><li>先访问过页面，才接受请求</li><li>使用与用户绑定的 token，并设置过期时间</li></ul></li><li>不要在一个接口内既返回数据又修改数据 <ul><li>不要使用 <code>GET</code> 请求修改数据</li></ul></li><li><code>X-Frame-Options: DENY/SAMEORIGIN</code></li><li>Node 中间件</li></ul>',6),a=[r];function c(d,s,n,_,u,f){return l(),i("div",null,a)}const m=e(o,[["render",c]]);export{h as __pageData,m as default};
