import{_ as s}from"./chunks/class-extends.dcf01d74.js";import{_ as a,c as n,o as l,a as e}from"./app.1db0b35b.js";const h=JSON.parse('{"title":"继承","description":"","frontmatter":{},"headers":[{"level":2,"title":"继承实例属性","slug":"继承实例属性","link":"#继承实例属性","children":[]},{"level":2,"title":"继承原型链","slug":"继承原型链","link":"#继承原型链","children":[]},{"level":2,"title":"完整继承","slug":"完整继承","link":"#完整继承","children":[]},{"level":2,"title":"临时继承","slug":"临时继承","link":"#临时继承","children":[]},{"level":2,"title":"多继承","slug":"多继承","link":"#多继承","children":[]},{"level":2,"title":"class extends","slug":"class-extends","link":"#class-extends","children":[]}],"relativePath":"fe/js/inheritance.md"}'),p={name:"fe/js/inheritance.md"},o=e(`<h1 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-hidden="true">#</a></h1><p>父类的属性可以分为两类：</p><ul><li>自有属性/实例属性：在构造函数内设置的属性</li><li>继承属性/原型链：<code>SuperType.prototype</code> 以及相应的原型链</li></ul><h2 id="继承实例属性" tabindex="-1">继承实例属性 <a class="header-anchor" href="#继承实例属性" aria-hidden="true">#</a></h2><p>在子类构造函数内部使用当前 <code>this</code> 调用父类构造函数，从而把父类的实例属性设置到子类上。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SubType</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">SuperType</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="继承原型链" tabindex="-1">继承原型链 <a class="header-anchor" href="#继承原型链" aria-hidden="true">#</a></h2><p>把子类构造函数的原型的原型设置为父类构造函数的原型。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setPrototypeOf</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">SubType</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SuperType</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="完整继承" tabindex="-1">完整继承 <a class="header-anchor" href="#完整继承" aria-hidden="true">#</a></h2><p>组合上述两种方法，就可以实现每个子类对象都有父类实例属性的一份拷贝，并且能够访问到父类的原型链。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SubType</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">SuperType</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setPrototypeOf</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">SubType</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SuperType</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="临时继承" tabindex="-1">临时继承 <a class="header-anchor" href="#临时继承" aria-hidden="true">#</a></h2><p>如果想临时创建一个对象继承自另一个对象，可以手动设置对象的原型。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#A6ACCD;">(proto)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><ul><li>如果创建多个对象继承同一个对象，继承的属性是共享的</li></ul><h2 id="多继承" tabindex="-1">多继承 <a class="header-anchor" href="#多继承" aria-hidden="true">#</a></h2><p>每个对象只能有一个原型，如果想从多个父类继承，可以把其他父类的属性复制到子类的原型上。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">SubType</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">SuperType</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">assign</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">SubType</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">OtherSuperType</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">AnotherSuperType</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="class-extends" tabindex="-1">class extends <a class="header-anchor" href="#class-extends" aria-hidden="true">#</a></h2><p>ES6 引入的最直观的继承语法。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SubType</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SuperType</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><img src="`+s+'" width="70%"><ul><li>数据属性：在子类 constructor 中执行父类 constructor</li><li>访问器属性和实例方法：<code>Rabbit.prototype.[[Prototype]]</code> 设置为 <code>Animal.prototype</code></li><li>静态属性和静态方法：<code>Rabbit.[[Prototype]]</code> 设置为 <code>Animal</code></li></ul>',24),t=[o];function c(r,i,y,F,D,d){return l(),n("div",null,t)}const u=a(p,[["render",c]]);export{h as __pageData,u as default};
