import{_ as t,c as e,o as a,a1 as d}from"./chunks/framework.mNpZ2GHZ.js";const f=JSON.parse('{"title":"React/Vue 对比","description":"","frontmatter":{},"headers":[],"relativePath":"fe/framework/misc/react-vs-vue.md","filePath":"fe/framework/misc/react-vs-vue.md","lastUpdated":1691589043000}'),r={name:"fe/framework/misc/react-vs-vue.md"},c=d('<h1 id="react-vue-对比" tabindex="-1">React/Vue 对比 <a class="header-anchor" href="#react-vue-对比" aria-label="Permalink to &quot;React/Vue 对比&quot;">​</a></h1><table tabindex="0"><thead><tr><th></th><th>React</th><th>Vue</th></tr></thead><tbody><tr><td>灵活性</td><td>JSX 写法可以方便地将 JS 计算结果反映到视图上，灵活性强</td><td>主流的模板写法在灵活性要求较高的场景不太适用</td></tr><tr><td>数据响应式</td><td>手动调用 <code>setState</code> 触发视图更新，提供变量粒度的响应式</td><td>数据改变时自动更新视图，提供属性粒度的响应式</td></tr><tr><td>性能</td><td>运行时难以获知足够多的优化信息，性能略差</td><td>模板编译阶段可以做更多优化，减少不必要的更新，性能更好</td></tr><tr><td>组件写法</td><td>函数式编程思想，一个组件就是一个函数</td><td>模板+CSS+JS 的单文件组件，类似于模板引擎，对有相关经验的开发者友好</td></tr></tbody></table>',2),o=[c];function s(_,n,i,h,u,l){return a(),e("div",null,o)}const p=t(r,[["render",s]]);export{f as __pageData,p as default};
