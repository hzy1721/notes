import{_ as s,c as i,o as a,a1 as e}from"./chunks/framework.mNpZ2GHZ.js";const b=JSON.parse('{"title":"Symbol","description":"","frontmatter":{},"headers":[],"relativePath":"fe/lang/js/symbol.md","filePath":"fe/lang/js/symbol.md","lastUpdated":1702822707000}'),l={name:"fe/lang/js/symbol.md"},t=e(`<h1 id="symbol" tabindex="-1">Symbol <a class="header-anchor" href="#symbol" aria-label="Permalink to &quot;Symbol&quot;">​</a></h1><p>Symbol 表示唯一的标识符。每个 Symbol 类型的值都是唯一的。</p><h2 id="创建-symbol" tabindex="-1">创建 Symbol <a class="header-anchor" href="#创建-symbol" aria-label="Permalink to &quot;创建 Symbol&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([desc]);</span></span></code></pre></div><ul><li><code>desc</code>：描述字符串，只是方便调试，并不代表使用相同的 desc 创建出的 Symbol 相同 <ul><li>使用 <code>id.description</code> 访问描述字符串</li></ul></li></ul><h2 id="tostring" tabindex="-1">toString() <a class="header-anchor" href="#tostring" aria-label="Permalink to &quot;toString()&quot;">​</a></h2><p>避免引起混乱，Symbol 不会自动转为字符串，需要显式调用 <code>toString()</code> 方法。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Symbol(id)</span></span></code></pre></div><h2 id="隐藏符号属性" tabindex="-1">隐藏符号属性 <a class="header-anchor" href="#隐藏符号属性" aria-label="Permalink to &quot;隐藏符号属性&quot;">​</a></h2><p>由于每个 Symbol 值都是唯一的，外界除了遍历所有 Symbol 属性外，很难直接覆盖一个已有的 Symbol 属性，因为外界很难拿到属性名。</p><p>在 <code>for...in</code>、<code>Object.keys()</code> 中只会列出字符串属性，不会列出符号属性。</p><p>可以使用 <code>Object.getOwnPropertySymbols()</code> 列出所有 Symbol 自有属性，或使用 <code>Reflect.ownKeys()</code> 列出所有自有属性 (包括字符串和 Symbol)。</p><h2 id="全局-symbol" tabindex="-1">全局 Symbol <a class="header-anchor" href="#全局-symbol" aria-label="Permalink to &quot;全局 Symbol&quot;">​</a></h2><p>如果需要每个字符串对应一个 Symbol，可以使用全局注册的 Symbol。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Symbol.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key);</span></span></code></pre></div><ul><li><code>key</code>：描述字符串，但是全局 Symbol 的一个描述字符串对应一个 Symbol</li></ul><p>使用相同的 <code>key</code> 总会返回相同的 Symbol，第一次调用时创建，后续调用返回相同的值。</p><p>也可以根据 Symbol 返回 key：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Symbol.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">keyFor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id);</span></span></code></pre></div><h2 id="系统-symbol" tabindex="-1">系统 Symbol <a class="header-anchor" href="#系统-symbol" aria-label="Permalink to &quot;系统 Symbol&quot;">​</a></h2><p>内建对象也大量使用了 Symbol 作为属性名，避免属性被覆盖。</p><ul><li><code>Symbol.hasInstance</code></li><li><code>Symbol.isConcatSpreadable</code></li><li><code>Symbol.iterator</code></li><li><code>Symbol.toPrimitive</code></li><li>...</li></ul>`,22),o=[t];function n(h,d,p,k,c,r){return a(),i("div",null,o)}const m=s(l,[["render",n]]);export{b as __pageData,m as default};
