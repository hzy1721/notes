import{_ as s,c as a,o as e,d as n}from"./app.eb4201a6.js";const A=JSON.parse('{"title":"ref","description":"","frontmatter":{},"headers":[{"level":2,"title":"useRef","slug":"useref","link":"#useref","children":[{"level":3,"title":"获取 DOM 元素","slug":"获取-dom-元素","link":"#获取-dom-元素","children":[]}]},{"level":2,"title":"forwardRef","slug":"forwardref","link":"#forwardref","children":[]}],"relativePath":"fe/react-stack/react/ref.md","lastUpdated":1683687617000}'),l={name:"fe/react-stack/react/ref.md"},o=n(`<h1 id="ref" tabindex="-1">ref <a class="header-anchor" href="#ref" aria-hidden="true">#</a></h1><h2 id="useref" tabindex="-1">useRef <a class="header-anchor" href="#useref" aria-hidden="true">#</a></h2><p>类似于 <code>useState</code>，提供一个初始值，后续渲染值会保留，但是修改值不会导致 re-render。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> ref </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useRef</span><span style="color:#A6ACCD;">(initialValue)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 读</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(ref</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">current)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 写</span></span>
<span class="line"><span style="color:#A6ACCD;">ref</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">current </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> newValue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="获取-dom-元素" tabindex="-1">获取 DOM 元素 <a class="header-anchor" href="#获取-dom-元素" aria-hidden="true">#</a></h3><p>ref 常用来获取组件渲染后的 DOM 元素。</p><ol><li>定义初始值为 <code>null</code> 的 ref</li><li>把 ref 传入组件的 <code>ref</code> 属性</li><li>React 渲染组件到屏幕上后，会设置 ref 的值为 DOM 元素</li><li>通过 ref 值进行 DOM 操作</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> inputRef </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useRef</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">inputRef</span><span style="color:#89DDFF;">} /&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="forwardref" tabindex="-1">forwardRef <a class="header-anchor" href="#forwardref" aria-hidden="true">#</a></h2><p>把 ref 透传给子组件，而不是直接绑定到父组件。</p><ul><li>ref 作为组件的第二个参数传入</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> SomeComponent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">forwardRef</span><span style="color:#A6ACCD;">(render)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// render: (props, ref) =&gt; { ... }</span></span>
<span class="line"></span></code></pre></div>`,13),p=[o];function t(r,c,i,d,f,D){return e(),a("div",null,p)}const C=s(l,[["render",t]]);export{A as __pageData,C as default};
