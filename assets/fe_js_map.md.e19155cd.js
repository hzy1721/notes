import{_ as e,c as a,o,a as c}from"./app.1db0b35b.js";const u=JSON.parse('{"title":"Map","description":"","frontmatter":{},"headers":[{"level":3,"title":"WeakMap","slug":"weakmap","link":"#weakmap","children":[]}],"relativePath":"fe/js/map.md"}'),d={name:"fe/js/map.md"},l=c('<h1 id="map" tabindex="-1">Map <a class="header-anchor" href="#map" aria-hidden="true">#</a></h1><p><code>Map</code> 表示键值对的集合，<code>Object</code> 也是键值对的集合，但 key 只能是字符串或 Symbol 类型，<code>Map</code> 的 key 可以是任何类型。</p><p>API：</p><ul><li><code>new Map(iterable)</code>：使用键值对的可迭代对象创建 Map <ul><li>把对象转换为 Map：<code>new Map(Object.entries(obj))</code></li><li>把 Map 转换为对象：<code>Object.fromEntries(map)</code></li></ul></li><li><code>map.set(key, value)</code>：设置键值对，返回 map 本身</li><li><code>map.get(key)</code>：读取键值对，key 不存在返回 <code>undefined</code></li><li><code>map.has(key)</code>：键值对是否存在</li><li><code>map.delete(key)</code>：删除键值对</li><li><code>map.clear()</code>：清空 map</li><li><code>map.size</code>：键值对个数</li></ul><p>遍历 Map：</p><ul><li><code>map.forEach((value, key, map) =&gt; { ... })</code></li><li><code>map.keys()</code>：所有键的可迭代对象</li><li><code>map.values()</code>：所有值的可迭代对象</li><li><code>map.entries()</code>：所有键值对的可迭代对象，<code>for...of</code> 默认使用</li></ul><h3 id="weakmap" tabindex="-1">WeakMap <a class="header-anchor" href="#weakmap" aria-hidden="true">#</a></h3><p><code>WeakMap</code> 与 <code>Map</code> 有两个区别：</p><ul><li>key 只能是对象</li><li>key 对象都是弱引用，垃圾回收不考虑 WeakMap 对 key 对象的引用</li></ul><p>适合记录对象的相关信息，对象不被引用后，相关信息自动消失。</p><p>API：</p><ul><li><code>new Map(iterable)</code></li><li><code>map.set(key, value)</code></li><li><code>map.get(key)</code></li><li><code>map.has(key)</code></li><li><code>map.delete(key)</code></li><li><strong>没有</strong> <code>clear()</code> 和 <code>size</code>，<strong>不可遍历</strong></li></ul>',12),i=[l];function p(t,r,s,n,m,k){return o(),a("div",null,i)}const h=e(d,[["render",p]]);export{u as __pageData,h as default};
