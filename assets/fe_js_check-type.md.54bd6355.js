import{_ as s,c as a,o as n,d as l}from"./app.c431fedc.js";const o="/assets/instanceof.f8e743ed.png",d=JSON.parse('{"title":"判断类型","description":"","frontmatter":{},"headers":[{"level":2,"title":"typeof","slug":"typeof","link":"#typeof","children":[]},{"level":2,"title":"instanceof","slug":"instanceof","link":"#instanceof","children":[]},{"level":2,"title":"obj.constructor","slug":"obj-constructor","link":"#obj-constructor","children":[]},{"level":2,"title":"Object.prototype.toString()","slug":"object-prototype-tostring","link":"#object-prototype-tostring","children":[]},{"level":2,"title":"Array.isArray()","slug":"array-isarray","link":"#array-isarray","children":[]}],"relativePath":"fe/js/check-type.md"}'),p={name:"fe/js/check-type.md"},e=l(`<h1 id="判断类型" tabindex="-1">判断类型 <a class="header-anchor" href="#判断类型" aria-hidden="true">#</a></h1><p>JS 判断数据类型有以下方法：</p><ul><li><code>typeof</code> 运算符</li><li><code>instanceof</code> 运算符</li><li><code>Object.prototype.toString()</code></li></ul><h2 id="typeof" tabindex="-1">typeof <a class="header-anchor" href="#typeof" aria-hidden="true">#</a></h2><p>返回参数类型的字符串。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// number</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#C792EA;">n</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// bigint</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// string</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// boolean</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// object</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">id</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// symbol</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// object</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> alert</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// function</span></span>
<span class="line"></span></code></pre></div><p>对于 8 种数据类型，绝大部分都会返回对应的字符串，有以下例外：</p><ul><li><code>typeof null</code> 结果是 <code>object</code>，这是 JS 早期的实现错误，为了兼容性而保留下来，实际上 <code>null</code> 与 <code>object</code> 毫无关系，是两种不同的数据类型，或者说 <code>null</code> 是一种特殊值</li><li><code>typeof alert</code> 结果是 <code>function</code>，实际上函数也属于对象类型，但 <code>typeof</code> 会区别对待函数，这是 JS 早期的遗留问题，但也给编程带来了很大的方便</li></ul><p>优点：</p><ul><li>支持 8 种数据类型和函数</li></ul><p>缺点：</p><ul><li><code>null</code> 判断有误</li><li>对象类型只能区分函数，无法区分其他对象类型</li></ul><h2 id="instanceof" tabindex="-1">instanceof <a class="header-anchor" href="#instanceof" aria-hidden="true">#</a></h2><p>检查对象是否属于某个类或其派生类。适用于 <code>class</code> 和构造函数。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">obj </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Class</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>执行过程：</p><ol><li>如果 <code>Class</code> 有静态方法 <code>Symbol.hasInstance</code>，就直接调用。</li><li>大部分 <code>Class</code> 没有这个方法，就检查 <code>Class.prototype</code> 是否等于 <code>obj</code> 原型链中的一个。 <ul><li>等价于 <code>Class.prototype.isPrototypeOf(obj)</code></li><li>检查 <code>Class.prototype</code> 是否在 <code>obj</code> 的原型链上</li></ul></li></ol><img src="`+o+`" style="zoom:50%;"><p>优点：</p><ul><li>支持所有对象类型，考虑继承在部分情况下会带来方便</li></ul><p>缺点：</p><ul><li>只支持对象，不支持原始类型</li><li>考虑继承导致无法精确判断对象的类型</li></ul><h2 id="obj-constructor" tabindex="-1">obj.constructor <a class="header-anchor" href="#obj-constructor" aria-hidden="true">#</a></h2><p>通过 <code>obj.constructor</code> 访问构造函数。</p><h2 id="object-prototype-tostring" tabindex="-1">Object.prototype.toString() <a class="header-anchor" href="#object-prototype-tostring" aria-hidden="true">#</a></h2><p><code>Object.prototype.toString()</code> 是把对象转换为字符串的默认方法，也能揭示值的类型。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> objectToString </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">toString</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">objectToString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [object Number]</span></span>
<span class="line"><span style="color:#A6ACCD;">objectToString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#C792EA;">n</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [object BigInt]</span></span>
<span class="line"><span style="color:#A6ACCD;">objectToString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [object String]</span></span>
<span class="line"><span style="color:#A6ACCD;">objectToString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [object Boolean]</span></span>
<span class="line"><span style="color:#A6ACCD;">objectToString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [object Null]</span></span>
<span class="line"><span style="color:#A6ACCD;">objectToString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">undefined</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [object Undefined]</span></span>
<span class="line"><span style="color:#A6ACCD;">objectToString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">id</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [object Symbol]</span></span>
<span class="line"><span style="color:#A6ACCD;">objectToString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [object Object]</span></span>
<span class="line"><span style="color:#A6ACCD;">objectToString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(alert)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [object Function]</span></span>
<span class="line"><span style="color:#A6ACCD;">objectToString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">([])</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [object Array]</span></span>
<span class="line"></span></code></pre></div><p>其实 <code>[object xxx]</code> 中的 <code>xxx</code> 是由对象的一个属性 <code>[Symbol.toStringTag]</code> 决定的，可以通过设置这个属性的值来修改 <code>toString()</code> 的输出。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> user </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">Symbol</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">toStringTag</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">User</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{}.</span><span style="color:#A6ACCD;">toString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(user))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [object User]</span></span>
<span class="line"></span></code></pre></div><p>大多数特定于环境的对象 (比如浏览器的 <code>window</code>) 都有一个这样的属性：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(window[Symbol</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">toStringTag])</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// Window</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{}.</span><span style="color:#A6ACCD;">toString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(window))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [object Window]</span></span>
<span class="line"></span></code></pre></div><p>优点：</p><ul><li>支持 8 种数据类型，能区分内建对象</li></ul><p>缺点：</p><ul><li>自定义类型需要设置 <code>[Symbol.toStringTag]</code>，不能直接用</li></ul><h2 id="array-isarray" tabindex="-1">Array.isArray() <a class="header-anchor" href="#array-isarray" aria-hidden="true">#</a></h2><p>判断传入的值是否为数组。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isArray</span><span style="color:#A6ACCD;">(value)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,38),t=[e];function c(r,y,i,D,A,C){return n(),a("div",null,t)}const u=s(p,[["render",c]]);export{d as __pageData,u as default};
