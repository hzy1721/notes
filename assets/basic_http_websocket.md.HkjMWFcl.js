import{_ as s,c as i,o as a,a1 as e}from"./chunks/framework.mNpZ2GHZ.js";const n="/assets/websocket.DOpsieOq.png",y=JSON.parse('{"title":"WebSocket","description":"","frontmatter":{},"headers":[],"relativePath":"basic/http/websocket.md","filePath":"basic/http/websocket.md","lastUpdated":1697294017000}'),t={name:"basic/http/websocket.md"},l=e(`<h1 id="websocket" tabindex="-1">WebSocket <a class="header-anchor" href="#websocket" aria-label="Permalink to &quot;WebSocket&quot;">​</a></h1><p>WebSocket 用于在客户端和服务端之间建立持久连接、进行全双工通信。</p><p>聊天软件、网络游戏、实时交易系统等应用需要使用 WebSocket。</p><h2 id="websocket-基本使用" tabindex="-1">WebSocket 基本使用 <a class="header-anchor" href="#websocket-基本使用" aria-label="Permalink to &quot;WebSocket 基本使用&quot;">​</a></h2><h3 id="创建-socket" tabindex="-1">创建 socket <a class="header-anchor" href="#创建-socket" aria-label="Permalink to &quot;创建 socket&quot;">​</a></h3><p>socket (套接字) 是数据传输的一个端点，首先需要创建 socket，用于后续的数据交互。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> socket </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WebSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ws://javascript.info&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>WebSocket 使用 <code>ws</code> 协议，类似于 HTTP，还有类似于 HTTPS 的 <code>wss</code>。</p><h3 id="监听事件" tabindex="-1">监听事件 <a class="header-anchor" href="#监听事件" aria-label="Permalink to &quot;监听事件&quot;">​</a></h3><p>socket 会触发 4 种事件：</p><ul><li><code>open</code>：连接建立</li><li><code>message</code>：接收到消息</li><li><code>error</code>：发生错误</li><li><code>close</code>：连接关闭</li></ul><p>使用 <code>on&lt;event&gt;</code> 添加事件处理函数，使用 <code>socket.send</code> 发送数据。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onopen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[open] Connection established&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Sending to server&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;My name is John&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onmessage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`[message] Data received from server: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onclose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (event.wasClean) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`[close] Connection closed cleanly, code=\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">code</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} reason=\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reason</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 例如服务器进程被杀死或网络中断</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在这种情况下，event.code 通常为 1006</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[close] Connection died&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onerror</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`[error] \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">error</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="连接建立" tabindex="-1">连接建立 <a class="header-anchor" href="#连接建立" aria-label="Permalink to &quot;连接建立&quot;">​</a></h2><p>WebSocket 建立连接时，首先使用 HTTP 询问服务端是否支持 WebSocket，如果支持则后续使用 WebSocket 进行通信。</p><img src="`+n+`" style="zoom:50%;"><p>假如要连接到 <code>wss://javascript.info/chat</code>，HTTP 请求报文如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /chat</span></span>
<span class="line"><span>Host: javascript.info</span></span>
<span class="line"><span>Origin: https://javascript.info</span></span>
<span class="line"><span>Connection: Upgrade</span></span>
<span class="line"><span>Upgrade: websocket</span></span>
<span class="line"><span>Sec-WebSocket-Key: Iv8io/9s+lYFgZWcXczP8Q==</span></span>
<span class="line"><span>Sec-WebSocket-Version: 13</span></span></code></pre></div><ul><li><code>GET</code> 请求</li><li><code>Origin</code>：当前页面 URL，WebSocket 原生支持跨域，不需要服务端做 CORS</li><li><code>Connection: Upgrade</code>：客户端想要更改协议</li><li><code>Upgrade: websocket</code>：更改为 WebSocket 协议</li><li><code>Sec-WebSocket-Key</code>：浏览器随机生成的密钥</li><li><code>Sec-WebSocket-Version</code>：WebSocket 协议版本</li></ul><p>服务端同意切换为 WebSocket 时的响应报文：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>101 Switching Protocols</span></span>
<span class="line"><span>Connection: Upgrade</span></span>
<span class="line"><span>Upgrade: websocket</span></span>
<span class="line"><span>Sec-WebSocket-Accept: hsBlbuDTkk24srzEOTBUlZAlC2g=</span></span></code></pre></div><ul><li><code>Sec-WebSocket-Accept</code>：服务端使用特殊算法将 <code>Sec-WebSocket-Key</code> 重新编码</li></ul><h2 id="数据传输" tabindex="-1">数据传输 <a class="header-anchor" href="#数据传输" aria-label="Permalink to &quot;数据传输&quot;">​</a></h2><p>WebSocket 通信以 frame 为单位，有以下几种类型：</p><ul><li>text：文本数据</li><li>binary data：二进制数据</li><li>ping/pong：服务端检查连接</li><li>connection close：连接关闭</li></ul><p><code>send</code> 只能发送文本或二进制数据，支持 <code>String</code>、<code>Blob</code>、<code>ArrayBuffer</code> 等类型。</p><p><code>socket.binaryType</code> 指定二进制数据的格式，默认是 <code>blob</code>。</p><h2 id="流量控制" tabindex="-1">流量控制 <a class="header-anchor" href="#流量控制" aria-label="Permalink to &quot;流量控制&quot;">​</a></h2><p>如果接收方的网速很慢，需要发送的数据就会大量缓存在发送方的内存中，可以通过检查已缓冲的字节数来调整发送速率，使缓存消耗的内存不至于过多：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 每 100ms 检查一次 socket</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 仅当所有现有的数据都已被发送出去时，再发送更多数据</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (socket.bufferedAmount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">moreData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="连接关闭" tabindex="-1">连接关闭 <a class="header-anchor" href="#连接关闭" aria-label="Permalink to &quot;连接关闭&quot;">​</a></h2><p>通信双方都可以主动关闭连接，发送可选的 code 和 reason。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([code], [reason]);</span></span></code></pre></div><p>常见 code：</p><ul><li><code>1000</code>：默认，正常关闭</li><li><code>1001</code>：一方离开，比如浏览器关闭页面</li><li><code>1006</code>：连接丢失时自动发送，无法手动发送</li><li><code>1009</code>：消息太大，无法处理</li><li><code>1011</code>：服务端意外错误</li><li>不能设置小于 <code>1000</code> 的 code</li></ul><h2 id="获取连接状态" tabindex="-1">获取连接状态 <a class="header-anchor" href="#获取连接状态" aria-label="Permalink to &quot;获取连接状态&quot;">​</a></h2><p><code>socket.readyState</code> 表示连接状态：</p><ul><li><code>0</code>：CONNECTING，正在建立连接</li><li><code>1</code>：OPEN，连接建立，通信中</li><li><code>2</code>：CLOSING，正在关闭连接</li><li><code>3</code>：CLOSED，连接已关闭</li></ul>`,38),p=[l];function h(k,o,d,c,E,r){return a(),i("div",null,p)}const F=s(t,[["render",h]]);export{y as __pageData,F as default};
