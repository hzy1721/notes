import{_ as s,c as l,o as a,d as e}from"./app.e6616afd.js";const o="/assets/juejin.2d2fd457.png",n="/assets/cross-origin-proxy.95d05e9d.png",C=JSON.parse('{"title":"跨域","description":"","frontmatter":{},"headers":[{"level":2,"title":"浏览器的同源策略","slug":"浏览器的同源策略","link":"#浏览器的同源策略","children":[]},{"level":2,"title":"CORS","slug":"cors","link":"#cors","children":[]},{"level":2,"title":"JSONP","slug":"jsonp","link":"#jsonp","children":[]},{"level":2,"title":"代理服务器","slug":"代理服务器","link":"#代理服务器","children":[]},{"level":2,"title":"WebSocket","slug":"websocket","link":"#websocket","children":[]}],"relativePath":"fe/browser/cross-origin.md"}'),p={name:"fe/browser/cross-origin.md"},t=e('<h1 id="跨域" tabindex="-1">跨域 <a class="header-anchor" href="#跨域" aria-hidden="true">#</a></h1><p>跨域问题 (cross origin) 来源于浏览器的同源策略 (same-origin policy)。</p><h2 id="浏览器的同源策略" tabindex="-1">浏览器的同源策略 <a class="header-anchor" href="#浏览器的同源策略" aria-hidden="true">#</a></h2><p>同源策略由 NetScape 于 1995 年引入浏览器，目的是为了保证用户信息安全，防止恶意网站窃取用户数据 (比如 Cookie)。目前所有浏览器都实行这个策略。</p><p>同源：两个 URL 的协议 (<strong>protocol</strong>)、主机名 (<strong>host</strong>)、端口 (<strong>port</strong>) 都相同。</p><p><img src="'+o+`" alt=""></p><p>请求与当前页面不同源的 URL 即为跨域。</p><p>常见的跨域请求：</p><ul><li>AJAX 请求，比如 <code>XMLHttpRequest</code> 和 <code>Fetch</code></li><li><code>&lt;script&gt;</code> 引入 JavaScript 脚本、<code>&lt;link&gt;</code> 引入 CSS、<code>@font-face</code> 引入字体</li><li><code>&lt;img&gt;</code> 引入图片、<code>&lt;audio&gt;</code> 引入音频、<code>&lt;video&gt;</code> 引入视频</li><li><code>&lt;iframe&gt;</code> 引入外部页面</li></ul><p>同源策略对跨域请求做了以下限制：</p><ul><li>AJAX 无法请求非同源 URL</li><li>无法读取非同源 Cookie、localStorage、IndexedDB</li><li>无法读取非同源 DOM (<code>iframe</code> 或 <code>window.open</code>)</li></ul><h2 id="cors" tabindex="-1">CORS <a class="header-anchor" href="#cors" aria-hidden="true">#</a></h2><p>CORS 在服务端做配置，返回 <code>Access-Control-*</code> 响应头。</p><ul><li>优点： <ul><li>支持全部 HTTP 请求</li><li>通信过程由浏览器完成、对用户透明、使用方便</li></ul></li><li>缺点： <ul><li>服务端需要做额外配置</li></ul></li></ul><p><a href="./cors.html">CORS</a></p><h2 id="jsonp" tabindex="-1">JSONP <a class="header-anchor" href="#jsonp" aria-hidden="true">#</a></h2><p>JSONP (JSON with Padding) 利用 <code>&lt;script&gt;</code> 允许跨域的特点实现从非同源 URL 获取 JSON 数据。</p><ul><li>优点： <ul><li>兼容性好，支持老式浏览器</li><li>不需要服务端做配置</li></ul></li><li>缺点： <ul><li>只支持 <code>GET</code> 请求</li></ul></li></ul><p>原理：拥有 <code>src</code> 属性的标签不受浏览器同源策略的影响，可以请求跨域资源。</p><ul><li><code>&lt;script&gt;</code></li><li><code>&lt;img&gt;</code></li><li><code>&lt;iframe&gt;</code></li></ul><p>JSONP 的工作流程如下：</p><ol><li>声明一个回调函数，参数是将要请求的数据，函数内可以对数据进行后续的处理。</li><li>构造 <code>&lt;script&gt;</code> 元素，将 <code>src</code> 属性设为接口地址，并带上回调函数名的 query param。</li><li><code>&lt;script&gt;</code> 元素加入 DOM，自动请求接口，返回的 JS 脚本会包含对回调函数的调用，传入的参数就是希望从后端获取的数据。</li><li>JS 脚本自动执行，回调函数以请求数据为参数被执行。</li></ol><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">userCallback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">userData</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">User data received: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">userData</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://api.example.com/users/123?callback=userCallback</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">userCallback</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">123</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Test User</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">email</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">test@example.com</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="代理服务器" tabindex="-1">代理服务器 <a class="header-anchor" href="#代理服务器" aria-hidden="true">#</a></h2><p>原理：同源策略是浏览器提出的，Node 没有同源策略。(跨域只存在于浏览器)</p><p>配置与前端同源的代理服务器，负责转发请求和响应，代理服务器和后端不需要同源。</p><p><img src="`+n+'" alt=""></p><h2 id="websocket" tabindex="-1">WebSocket <a class="header-anchor" href="#websocket" aria-hidden="true">#</a></h2><p>原理：WebSocket 不执行同源策略，允许跨域。</p><p>但是一般不会为了跨域就把 HTTP 请求换成 WebSocket 通信。</p>',31),c=[t];function r(i,d,D,F,y,h){return a(),l("div",null,c)}const g=s(p,[["render",r]]);export{C as __pageData,g as default};
