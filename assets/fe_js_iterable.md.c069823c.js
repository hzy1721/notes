import{_ as s,c as a,o as l,d as n}from"./app.a7b44f76.js";const C=JSON.parse('{"title":"可迭代对象","description":"","frontmatter":{},"headers":[{"level":2,"title":"Symbol.iterator","slug":"symbol-iterator","link":"#symbol-iterator","children":[]},{"level":2,"title":"可迭代 v.s. 类数组","slug":"可迭代-v-s-类数组","link":"#可迭代-v-s-类数组","children":[]}],"relativePath":"fe/js/iterable.md"}'),o={name:"fe/js/iterable.md"},e=n(`<h1 id="可迭代对象" tabindex="-1">可迭代对象 <a class="header-anchor" href="#可迭代对象" aria-hidden="true">#</a></h1><p><strong>可迭代对象</strong>是可以在 <code>for...of</code> 循环中使用的对象。可以将任何对象通过定制变为可迭代对象。</p><p>可迭代的内建对象：</p><ul><li><code>String</code></li><li><code>Array</code></li><li><code>Set</code></li><li><code>Map</code></li><li><code>arguments</code></li><li><code>TypedArray</code></li><li><code>NodeList</code></li></ul><h2 id="symbol-iterator" tabindex="-1">Symbol.iterator <a class="header-anchor" href="#symbol-iterator" aria-hidden="true">#</a></h2><p><code>for...of</code> 循环遍历可迭代对象的关键在于对象的 <code>Symbol.iterator</code> 方法。</p><ol><li><code>for...of</code> 循环启动时，调用对象的 <code>Symbol.iterator</code> 方法，返回一个<strong>迭代器 (iterator)</strong>。 <ul><li>迭代器是指拥有 <code>next()</code> 方法的对象。</li><li>可选的 <code>return()</code> 方法在迭代提前退出前调用 (<code>break</code> 或出错)。</li></ul></li><li><code>for...of</code> 调用迭代器的 <code>next()</code> 方法获取下一个值。 <ul><li><code>next()</code> 返回的格式为 <code>{ done: Boolean, value: any }</code>，<code>done: true</code> 表示循环结束</li></ul></li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> range </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">from</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">to</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  [Symbol</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">iterator]</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      current</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">from</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      last</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">to</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      next</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">current</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">last</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> done</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> value</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">current</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> done</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> range) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">num</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 1, 2, 3, 4, 5</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>可迭代对象就是实现了 <code>Symbol.iterator</code> 方法的对象。</p><p>除了 <code>for...of</code>，还有其他场合会用到 <code>Symbol.iterator</code> 返回的迭代器对象：</p><ul><li>解构赋值 (destructuring)</li><li>扩展运算符 (spread operator)</li><li><code>yield*</code></li></ul><h2 id="可迭代-v-s-类数组" tabindex="-1">可迭代 v.s. 类数组 <a class="header-anchor" href="#可迭代-v-s-类数组" aria-hidden="true">#</a></h2><ul><li>可迭代 (Iterable)：实现了 <code>Symbol.iterator</code> 方法。</li><li>类数组 (Array-like)：有索引和 <code>length</code> 属性。</li></ul><p>有的对象即是可迭代、又是类数组，比如 <code>String</code>。</p><p>可迭代不一定是类数组，类数组不一定是可迭代。</p><p><code>Array.from()</code> 可以把一个可迭代或类数组对象转换为数组。</p>`,16),p=[e];function t(c,r,F,y,i,D){return l(),a("div",null,p)}const A=s(o,[["render",t]]);export{C as __pageData,A as default};
