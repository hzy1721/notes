import{_ as e,c as a,o as s,a as n}from"./app.7747c6a9.js";const u=JSON.parse('{"title":"请求头","description":"","frontmatter":{},"headers":[{"level":2,"title":"Request headers","slug":"request-headers","link":"#request-headers","children":[]}],"relativePath":"http/request-headers.md"}'),l={name:"http/request-headers.md"},t=n(`<h1 id="请求头" tabindex="-1">请求头 <a class="header-anchor" href="#请求头" aria-hidden="true">#</a></h1><p>HTTP Header 是请求和响应报文的附加信息，每个 Header 为不区分大小写的 <code>name: value</code>。</p><p>自定义 Header 可以用 <code>X-</code> 前缀，但是这种用法在 2012 年被 IETF 弃用。</p><p>根据上下文，可以将 Header 分为：</p><ul><li>Request headers：描述请求资源的信息和客户端的情况。</li><li>Response headers：响应数据的补充信息。</li><li>Representation headers：描述传输数据的信息。</li><li>Payload headers：描述与传输数据的表现形式无关的信息。</li></ul><p>根据代理的处理方式，可以将 Header 分为：</p><ul><li>End-to-end headers：代理只能转发、不能修改、必须缓存。</li><li>Hop-by-hop headers：只对一跳连接有意义，代理禁止转发和缓存。</li></ul><h2 id="request-headers" tabindex="-1">Request headers <a class="header-anchor" href="#request-headers" aria-hidden="true">#</a></h2><p>请求头只能用于 HTTP 请求报文，但并不是只有请求头才能出现在请求报文中，请求报文还可以包括 Representation headers 和 Payload headers。</p><p>下面列举了一些常见的请求头：</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">GET /home.html HTTP/1.1</span></span>
<span class="line"><span style="color:#A6ACCD;">Host: developer.mozilla.org</span></span>
<span class="line"><span style="color:#A6ACCD;">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:50.0) Gecko/20100101 Firefox/50.0</span></span>
<span class="line"><span style="color:#A6ACCD;">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span></span>
<span class="line"><span style="color:#A6ACCD;">Accept-Language: en-US,en;q=0.5</span></span>
<span class="line"><span style="color:#A6ACCD;">Accept-Encoding: gzip, deflate, br</span></span>
<span class="line"><span style="color:#A6ACCD;">Referer: https://developer.mozilla.org/testpage.html</span></span>
<span class="line"><span style="color:#A6ACCD;">Connection: keep-alive</span></span>
<span class="line"><span style="color:#A6ACCD;">Upgrade-Insecure-Requests: 1</span></span>
<span class="line"><span style="color:#A6ACCD;">If-Modified-Since: Mon, 18 Jul 2016 02:36:04 GMT</span></span>
<span class="line"><span style="color:#A6ACCD;">If-None-Match: &quot;c561c68d0ba92bbeb8b0fff2a9199f722e3a621a&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">Cache-Control: max-age=0</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>对 HTTP Headers 的学习最好基于应用场景，比如缓存、CORS 等。</p>`,12),p=[t];function o(r,c,i,d,h,C){return s(),a("div",null,p)}const _=e(l,[["render",o]]);export{u as __pageData,_ as default};
