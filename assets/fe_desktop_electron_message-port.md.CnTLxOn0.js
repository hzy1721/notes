import{_ as s,c as e,o as a,a1 as t}from"./chunks/framework.mNpZ2GHZ.js";const E=JSON.parse('{"title":"MessagePort","description":"","frontmatter":{},"headers":[],"relativePath":"fe/desktop/electron/message-port.md","filePath":"fe/desktop/electron/message-port.md","lastUpdated":1704115023000}'),i={name:"fe/desktop/electron/message-port.md"},n=t(`<h1 id="messageport" tabindex="-1">MessagePort <a class="header-anchor" href="#messageport" aria-label="Permalink to &quot;MessagePort&quot;">​</a></h1><p>Electron 扩展了 MessagePort，使其能用于主进程和渲染进程间的通信。</p><ul><li>main &lt;-&gt; renderer</li><li>renderer &lt;-&gt; renderer</li></ul><table tabindex="0"><thead><tr><th>进程</th><th>Port</th><th>Channel</th></tr></thead><tbody><tr><td>main</td><td>MessagePort</td><td>MessageChannel</td></tr><tr><td>renderer</td><td>MessagePortMain</td><td>MessageChannelMain</td></tr></tbody></table><ol><li>主进程或渲染进程创建 MessagePort</li><li>通过 <code>ipcRenderer.postMessage</code> 或 <code>webContents.postMessage</code> 传递给另一方</li></ol><h2 id="close-事件" tabindex="-1">close 事件 <a class="header-anchor" href="#close-事件" aria-label="Permalink to &quot;close 事件&quot;">​</a></h2><p>新增 close 事件，当其中一方关闭 MessagePort，另一方会收到 close 事件。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// main</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">port.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;close&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, handleChannelClose);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// renderer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">port.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;close&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, handleChannelClose);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">port.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onclose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handleChannelClose);</span></span></code></pre></div>`,8),l=[n];function r(o,h,d,p,k,c){return a(),e("div",null,l)}const _=s(i,[["render",r]]);export{E as __pageData,_ as default};
