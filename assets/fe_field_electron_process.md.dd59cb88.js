import{_ as e,c as a,o as r,U as o}from"./chunks/framework.e548c890.js";const f=JSON.parse('{"title":"进程模型","description":"","frontmatter":{},"headers":[],"relativePath":"fe/field/electron/process.md","filePath":"fe/field/electron/process.md","lastUpdated":1698932990000}'),i={name:"fe/field/electron/process.md"},l=o('<h1 id="进程模型" tabindex="-1">进程模型 <a class="header-anchor" href="#进程模型" aria-label="Permalink to &quot;进程模型&quot;">​</a></h1><h2 id="主进程-main" tabindex="-1">主进程 main <a class="header-anchor" href="#主进程-main" aria-label="Permalink to &quot;主进程 main&quot;">​</a></h2><p><code>main.js</code> 控制主进程，负责：</p><ul><li>创建原生窗口</li><li>管理生命周期</li><li>进行授权操作</li><li>管理渲染进程</li></ul><p>不能：</p><ul><li>访问和操作 DOM</li></ul><h2 id="渲染进程-renderer" tabindex="-1">渲染进程 renderer <a class="header-anchor" href="#渲染进程-renderer" aria-label="Permalink to &quot;渲染进程 renderer&quot;">​</a></h2><p>每个页面对应一个渲染进程，可以像前端应用一样访问各种 Web API。</p><h2 id="preload-脚本" tabindex="-1">preload 脚本 <a class="header-anchor" href="#preload-脚本" aria-label="Permalink to &quot;preload 脚本&quot;">​</a></h2><p>在网页加载前执行，能够同时访问 Node API 和 DOM，通常用于向渲染进程暴露授权 API (通过 <code>contextBridge</code>)。</p><h2 id="沙箱" tabindex="-1">沙箱 <a class="header-anchor" href="#沙箱" aria-label="Permalink to &quot;沙箱&quot;">​</a></h2><h2 id="ipc" tabindex="-1">IPC <a class="header-anchor" href="#ipc" aria-label="Permalink to &quot;IPC&quot;">​</a></h2><ul><li><code>ipcMain</code></li><li><code>ipcRenderer</code></li></ul>',13),t=[l];function d(c,n,s,h,p,_){return r(),a("div",null,t)}const m=e(i,[["render",d]]);export{f as __pageData,m as default};
