import{_ as s,c as a,o as n,d as l}from"./app.f24a99d1.js";const A=JSON.parse('{"title":"hooks","description":"","frontmatter":{},"headers":[{"level":2,"title":"限制","slug":"限制","link":"#限制","children":[]},{"level":2,"title":"useState","slug":"usestate","link":"#usestate","children":[]},{"level":2,"title":"useEffect","slug":"useeffect","link":"#useeffect","children":[]},{"level":2,"title":"自定义 hook","slug":"自定义-hook","link":"#自定义-hook","children":[]}],"relativePath":"fe/framework/react/hooks.md","lastUpdated":1681868001000}'),o={name:"fe/framework/react/hooks.md"},e=l(`<h1 id="hooks" tabindex="-1">hooks <a class="header-anchor" href="#hooks" aria-hidden="true">#</a></h1><p>React 16.8 引入，提供一系列 <code>use</code> 开头的函数，支持在函数组件内保存状态和触发副作用。</p><p>函数组件 + hooks 的写法解决了类组件的一些缺点，逐渐成为 React 的主流写法。</p><p>React 内置一些常用 hook，包括 <code>useState</code>、<code>useEffect</code>、<code>useContext</code> 等。</p><p>开发者也可以基于内置 hook 编写自定义 hook，提取组件的状态和逻辑。</p><h2 id="限制" tabindex="-1">限制 <a class="header-anchor" href="#限制" aria-hidden="true">#</a></h2><p>hooks 有 2 条限制：</p><ul><li>只在<strong>最顶层</strong>使用 hook，确保每次渲染以相同的顺序调用 hook <ul><li>函数组件或自定义 hook 的顶层作用域</li><li>不能在条件判断、循环体、嵌套函数内调用 hook</li></ul></li><li>只在<strong>函数组件</strong>和<strong>自定义 hook</strong> 中调用 Hook，不能在普通函数中使用 hook <ul><li>确保组件的状态逻辑清晰可读</li></ul></li></ul><h2 id="usestate" tabindex="-1">useState <a class="header-anchor" href="#usestate" aria-hidden="true">#</a></h2><p><code>useState</code> 声明一个状态变量，传入初始值，返回状态变量与修改状态值的 setter 函数。</p><ul><li>初始值可以是任意类型</li><li>通过解构语法为返回的变量和 setter 函数赋予合适的名称</li><li>多次调用返回的状态变量是独立的</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> setState</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useState</span><span style="color:#A6ACCD;">(initialState)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="useeffect" tabindex="-1">useEffect <a class="header-anchor" href="#useeffect" aria-hidden="true">#</a></h2><p><code>useEffect</code> 用于触发副作用，比如修改 DOM、建立订阅等，在组件第一次挂载和每次更新时执行。</p><p>返回的函数在每次更新和组件卸载时执行，用于进行一些后处理，比如取消订阅、取消定时器等。</p><p>组件更新时，先执行返回的清理函数，后重新执行 <code>useEffect</code>。</p><p>不是所有 <code>useEffect</code> 都需要每次组件更新时执行，可以在第二个参数指定依赖数组，只有数组元素变化时才重新执行。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">useEffect</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">subscribe</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">unsubscribe</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> [dep1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dep2])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="自定义-hook" tabindex="-1">自定义 hook <a class="header-anchor" href="#自定义-hook" aria-hidden="true">#</a></h2><p>可以通过自定义 hook 封装属于同一功能的状态和逻辑，实现组件代码的分割和复用，避免分散在多个位置影响可读性。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useFriendStatus</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">friendID</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">isOnline</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">setIsOnline</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useState</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">useEffect</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">handleStatusChange</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">status</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">setIsOnline</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">status</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">isOnline</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">ChatAPI</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">subscribeToFriendStatus</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">friendID</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">handleStatusChange</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">ChatAPI</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">unsubscribeFromFriendStatus</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">friendID</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">handleStatusChange</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isOnline</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li><code>useFriendStatus</code> 传入好友 ID，内部完成在线状态的声明和订阅，只对外暴露实时更新的在线状态</li><li>外部组件可以使用这个自定义 hook 监听指定好友的在线状态，并确保在线状态变化时，返回值能够及时更新，避免在多个需要类似功能的组件中写重复的代码</li></ul>`,22),p=[e];function t(c,r,F,y,i,D){return n(),a("div",null,p)}const h=s(o,[["render",t]]);export{A as __pageData,h as default};
