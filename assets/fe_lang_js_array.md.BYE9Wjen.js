import{_ as s,c as t,o as i,a1 as a}from"./chunks/framework.mNpZ2GHZ.js";const y=JSON.parse('{"title":"Array","description":"","frontmatter":{},"headers":[],"relativePath":"fe/lang/js/array.md","filePath":"fe/lang/js/array.md","lastUpdated":1702822707000}'),d={name:"fe/lang/js/array.md"},e=a(`<h1 id="array" tabindex="-1">Array <a class="header-anchor" href="#array" aria-label="Permalink to &quot;Array&quot;">​</a></h1><h2 id="本质" tabindex="-1">本质 <a class="header-anchor" href="#本质" aria-label="Permalink to &quot;本质&quot;">​</a></h2><p>数组属于对象类型，数组元素就是 key 为 <code>0, 1, 2, ...</code> 的属性。</p><p>JS 通过语法规定和引擎优化来让数组对象表现得像其他语言中的数组一样。</p><ul><li>枚举对象属性时，会优先枚举非负整数的字符串属性，并按照数值从小到大的顺序</li><li>JS 引擎尽量把数组元素连续存储</li></ul><h2 id="字面量" tabindex="-1">字面量 <a class="header-anchor" href="#字面量" aria-label="Permalink to &quot;字面量&quot;">​</a></h2><p>直接书写数组的初始元素或空数组。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre></div><h2 id="构造函数" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-label="Permalink to &quot;构造函数&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 空数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 只传入一个整型参数，范围在 [0, 2^32 - 1]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arrayLength);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 其他情况作为数组的第一个元素</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element1);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 数组的多个元素</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element1, element2, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* …, */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> elementN);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可以直接作为函数调用而不使用 new</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arrayLength);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element1);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element1, element2, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* …, */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> elementN);</span></span></code></pre></div><h2 id="自有属性" tabindex="-1">自有属性 <a class="header-anchor" href="#自有属性" aria-label="Permalink to &quot;自有属性&quot;">​</a></h2><h3 id="length" tabindex="-1">length <a class="header-anchor" href="#length" aria-label="Permalink to &quot;length&quot;">​</a></h3><p>数组长度，本质是最大数字属性 + 1，会随数组元素的变化而更新。</p><ul><li>赋值不存在的元素，会更新 <code>length</code> 为最大索引 + 1，但不会填充空缺的元素</li><li>减小 <code>length</code> 会删除长度之外的元素</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 124</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [1, 2]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 清空数组</span></span></code></pre></div><h2 id="实例方法" tabindex="-1">实例方法 <a class="header-anchor" href="#实例方法" aria-label="Permalink to &quot;实例方法&quot;">​</a></h2><table tabindex="0"><thead><tr><th>用途</th><th>方法</th></tr></thead><tbody><tr><td>访问元素</td><td><code>at</code></td></tr><tr><td>拼接数组</td><td><code>concat</code></td></tr><tr><td>复制元素</td><td><code>copyWithin</code></td></tr><tr><td>可迭代对象</td><td><code>keys</code></td></tr><tr><td></td><td><code>values</code></td></tr><tr><td></td><td><code>entries</code></td></tr><tr><td>测试数组元素</td><td><code>every</code></td></tr><tr><td></td><td><code>some</code></td></tr><tr><td>填充数组</td><td><code>fill</code></td></tr><tr><td>过滤元素</td><td><code>filter</code></td></tr><tr><td>查找元素</td><td><code>find</code></td></tr><tr><td></td><td><code>findIndex</code></td></tr><tr><td></td><td><code>findLast</code></td></tr><tr><td></td><td><code>findLastIndex</code></td></tr><tr><td></td><td><code>includes</code></td></tr><tr><td></td><td><code>indexOf</code></td></tr><tr><td></td><td><code>lastIndexOf</code></td></tr><tr><td>数组拍平</td><td><code>flat</code></td></tr><tr><td></td><td><code>flatMap</code></td></tr><tr><td>遍历元素</td><td><code>forEach</code></td></tr><tr><td>转换为字符串</td><td><code>join</code></td></tr><tr><td></td><td><code>toString</code></td></tr><tr><td></td><td><code>toLocaleString</code></td></tr><tr><td>修改元素</td><td><code>map</code></td></tr><tr><td></td><td><code>with</code></td></tr><tr><td>修改数组</td><td><code>splice</code></td></tr><tr><td>栈队操作</td><td><code>push</code></td></tr><tr><td></td><td><code>pop</code></td></tr><tr><td></td><td><code>shift</code></td></tr><tr><td></td><td><code>unshift</code></td></tr><tr><td>聚合为一个结果</td><td><code>reduce</code></td></tr><tr><td></td><td><code>reduceRight</code></td></tr><tr><td>数组切片</td><td><code>slice</code></td></tr><tr><td>数组排序</td><td><code>sort</code></td></tr><tr><td>反转数组</td><td><code>reverse</code></td></tr><tr><td>非原地版本</td><td><code>toReversed</code></td></tr><tr><td></td><td><code>toSorted</code></td></tr><tr><td></td><td><code>toSpliced</code></td></tr></tbody></table><h2 id="静态方法" tabindex="-1">静态方法 <a class="header-anchor" href="#静态方法" aria-label="Permalink to &quot;静态方法&quot;">​</a></h2><ul><li><code>Array.from</code><ul><li>可迭代对象/类数组对象的浅拷贝</li></ul></li><li><code>Array.fromSync</code><ul><li>异步可迭代对象/可迭代对象/类数组对象的浅拷贝</li></ul></li><li><code>Array.isArray</code><ul><li>判断是否为数组</li></ul></li><li><code>Array.of</code><ul><li>用元素创建数组，相比 <code>new Array()</code> 行为更单一</li></ul></li></ul><h2 id="可迭代" tabindex="-1">可迭代 <a class="header-anchor" href="#可迭代" aria-label="Permalink to &quot;可迭代&quot;">​</a></h2><p>数组是可迭代对象，key 是索引，value 是元素值。</p>`,21),n=[e];function l(h,r,p,k,o,c){return i(),t("div",null,n)}const g=s(d,[["render",l]]);export{y as __pageData,g as default};
