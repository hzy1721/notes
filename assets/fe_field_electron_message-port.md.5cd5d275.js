import{_ as s,c as e,o as a,U as t}from"./chunks/framework.e548c890.js";const C=JSON.parse('{"title":"MessagePort","description":"","frontmatter":{},"headers":[],"relativePath":"fe/field/electron/message-port.md","filePath":"fe/field/electron/message-port.md","lastUpdated":1699838445000}'),n={name:"fe/field/electron/message-port.md"},o=t(`<h1 id="messageport" tabindex="-1">MessagePort <a class="header-anchor" href="#messageport" aria-label="Permalink to &quot;MessagePort&quot;">​</a></h1><p>Electron 扩展了 MessagePort，使其能用于主进程和渲染进程间的通信。</p><ul><li>main &lt;-&gt; renderer</li><li>renderer &lt;-&gt; renderer</li></ul><table><thead><tr><th>进程</th><th>Port</th><th>Channel</th></tr></thead><tbody><tr><td>main</td><td>MessagePort</td><td>MessageChannel</td></tr><tr><td>renderer</td><td>MessagePortMain</td><td>MessageChannelMain</td></tr></tbody></table><ol><li>主进程或渲染进程创建 MessagePort</li><li>通过 <code>ipcRenderer.postMessage</code> 或 <code>webContents.postMessage</code> 传递给另一方</li></ol><h2 id="close-事件" tabindex="-1">close 事件 <a class="header-anchor" href="#close-事件" aria-label="Permalink to &quot;close 事件&quot;">​</a></h2><p>新增 close 事件，当其中一方关闭 MessagePort，另一方会收到 close 事件。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// main</span></span>
<span class="line"><span style="color:#A6ACCD;">port</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">close</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> handleChannelClose)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// renderer</span></span>
<span class="line"><span style="color:#A6ACCD;">port</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">close</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> handleChannelClose)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">port</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onclose</span><span style="color:#A6ACCD;">(handleChannelClose)</span><span style="color:#89DDFF;">;</span></span></code></pre></div>`,8),l=[o];function r(p,c,d,i,h,D){return a(),e("div",null,l)}const F=s(n,[["render",r]]);export{C as __pageData,F as default};
