import{_ as s,c as a,o as i,a1 as t}from"./chunks/framework.mNpZ2GHZ.js";const g=JSON.parse('{"title":"useState","description":"","frontmatter":{},"headers":[],"relativePath":"fe/react/react/hooks/use-state.md","filePath":"fe/react/react/hooks/use-state.md","lastUpdated":1702822707000}'),e={name:"fe/react/react/hooks/use-state.md"},h=t(`<h1 id="usestate" tabindex="-1">useState <a class="header-anchor" href="#usestate" aria-label="Permalink to &quot;useState&quot;">​</a></h1><p><code>useState</code> 声明一个状态变量，传入初始值，返回状态变量与修改状态值的 setter 函数。</p><ul><li>初始值可以是任意类型</li><li>通过解构语法为返回的变量和 setter 函数赋予合适的名称</li><li>多次调用返回的状态变量是独立的</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(initialState);</span></span></code></pre></div><h2 id="状态更新" tabindex="-1">状态更新 <a class="header-anchor" href="#状态更新" aria-label="Permalink to &quot;状态更新&quot;">​</a></h2><p>每次渲染的 state 是固定不变的，调用 setState 不会修改 state 的值，而是触发一次重新渲染，在重新执行的组件函数内 <code>useState</code> 返回的 state 才会变为新值。</p><p>调用一次 setState 不会立即开始重新渲染，而是等待当前宏任务执行完后统一进行渲染，可以合并多次状态更新 (batching)，提高性能。</p><p>setState 可以传入函数，参数是上一次更新后的状态，可以实现同一个状态的多次更新。</p><h2 id="嵌套对象" tabindex="-1">嵌套对象 <a class="header-anchor" href="#嵌套对象" aria-label="Permalink to &quot;嵌套对象&quot;">​</a></h2><p>对于嵌套层数比较多的对象，虽然也可以用扩展语法 <code>...</code> 更新，但可能会比较麻烦。可以尝试使用 <code>useImmer</code> 代替 <code>useState</code>，使用返回的 <code>updateState</code> 函数更新对象，写法更简洁方便。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useImmer } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;use-immer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">updatePerson</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useImmer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Niki de Saint Phalle&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  artwork: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Blue Nana&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    city: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hamburg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    image: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://i.imgur.com/Sd1AgUOm.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updatePerson</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">draft</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  draft.artwork.title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.target.value;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="更新数组" tabindex="-1">更新数组 <a class="header-anchor" href="#更新数组" aria-label="Permalink to &quot;更新数组&quot;">​</a></h2><p>避免使用修改数组的方法，总是使用返回新数组的方法。或者使用 <code>useImmer</code> 代替 <code>useState</code>，可以使用所有方法。</p><table tabindex="0"><thead><tr><th></th><th>avoid (修改原数组)</th><th>prefer (返回新数组)</th></tr></thead><tbody><tr><td>添加</td><td>push, unshift</td><td>concat, [...arr]</td></tr><tr><td>删除</td><td>pop, shift, splice</td><td>filter, slice</td></tr><tr><td>替换</td><td>splice, arr[i] = ...</td><td>map</td></tr><tr><td>排序</td><td>reverse, sort</td><td>先复制为新数组再调用方法</td></tr></tbody></table><h2 id="状态上移" tabindex="-1">状态上移 <a class="header-anchor" href="#状态上移" aria-label="Permalink to &quot;状态上移&quot;">​</a></h2><p>如果需要在两个或多个组件之间共享状态数据，可以把状态定义上移到最近的公共祖先组件，然后通过 <code>props</code> 或 <code>Context</code> 将状态变量传递到需要的后代组件。</p>`,18),n=[h];function l(p,d,k,r,o,E){return i(),a("div",null,n)}const u=s(e,[["render",l]]);export{g as __pageData,u as default};
