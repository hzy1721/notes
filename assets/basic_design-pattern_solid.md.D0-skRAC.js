import{_ as t,c as d,o as e,a1 as a}from"./chunks/framework.mNpZ2GHZ.js";const S=JSON.parse('{"title":"SOLID 原则","description":"","frontmatter":{},"headers":[],"relativePath":"basic/design-pattern/solid.md","filePath":"basic/design-pattern/solid.md","lastUpdated":1695200371000}'),r={name:"basic/design-pattern/solid.md"},s=a('<h1 id="solid-原则" tabindex="-1">SOLID 原则 <a class="header-anchor" href="#solid-原则" aria-label="Permalink to &quot;SOLID 原则&quot;">​</a></h1><p>面向对象类设计的五条原则 (Principle)。</p><table tabindex="0"><thead><tr><th>缩写</th><th>全称</th><th>中文</th><th>含义</th></tr></thead><tbody><tr><td>S</td><td>Single Responsibility</td><td>单一职责</td><td>一个类只做一件事</td></tr><tr><td>O</td><td>Open Closed</td><td>开放封闭</td><td>对扩展开放、对修改封闭</td></tr><tr><td>L</td><td>Liskov Substitution</td><td>里氏替换</td><td>任何对象都可以替换为子类对象</td></tr><tr><td>I</td><td>Interface Segregation</td><td>接口分离</td><td>不应该实现不使用的方法</td></tr><tr><td>D</td><td>Dependency Inversion</td><td>依赖倒置</td><td>高层次模块依赖于抽象，具体实现依赖于抽象</td></tr></tbody></table>',3),i=[s];function o(n,c,_,l,h,p){return e(),d("div",null,i)}const f=t(r,[["render",o]]);export{S as __pageData,f as default};
