import{_ as t,c as d,o as e,a1 as c}from"./chunks/framework.mNpZ2GHZ.js";const m=JSON.parse('{"title":"CSP","description":"","frontmatter":{},"headers":[],"relativePath":"fe/security/policy/csp.md","filePath":"fe/security/policy/csp.md","lastUpdated":1693485820000}'),o={name:"fe/security/policy/csp.md"},r=c(`<h1 id="csp" tabindex="-1">CSP <a class="header-anchor" href="#csp" aria-label="Permalink to &quot;CSP&quot;">​</a></h1><p>内容安全策略 (Content Security Policy, CSP) 允许指定信任的资源地址，浏览器只会加载符合要求的资源、并忽略其他来源的资源，可以防御跨站脚本攻击。</p><p>兼容性：</p><ul><li>除了 CSP 2 的部分特性，其他特性都是后向兼容的</li><li>客户端和服务端有一方不支持也不会报错，只会降级到同源策略</li><li>caniuse：CSP 2 95%，CSP 1 96%</li></ul><h2 id="服务端配置" tabindex="-1">服务端配置 <a class="header-anchor" href="#服务端配置" aria-label="Permalink to &quot;服务端配置&quot;">​</a></h2><p>设置 <code>Content-Security-Policy</code> 响应头，值为若干策略指令 (policy directives)。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Content-Security-Policy: &lt;policy-directive&gt;; &lt;policy-directive&gt;</span></span></code></pre></div><table tabindex="0"><thead><tr><th>分类</th><th>指令</th><th>含义</th></tr></thead><tbody><tr><td>请求</td><td><code>default-src</code></td><td>其他资源的兜底策略</td></tr><tr><td></td><td><code>script-src</code></td><td>JS、WASM</td></tr><tr><td></td><td><code>script-src-elem</code></td><td><code>&lt;script&gt;</code></td></tr><tr><td></td><td><code>script-src-attr</code></td><td><code>onevent</code> 事件处理函数</td></tr><tr><td></td><td><code>style-src</code></td><td>CSS</td></tr><tr><td></td><td><code>style-src-elem</code></td><td><code>&lt;style&gt;</code>、<code>&lt;link&gt;</code></td></tr><tr><td></td><td><code>style-src-attr</code></td><td>内联样式</td></tr><tr><td></td><td><code>img-src</code></td><td>图片和 favicon</td></tr><tr><td></td><td><code>font-src</code></td><td><code>@font-face</code> 字体</td></tr><tr><td></td><td><code>media-src</code></td><td><code>&lt;audio&gt;</code>、<code>&lt;video&gt;</code>、<code>&lt;track&gt;</code></td></tr><tr><td></td><td><code>object-src</code></td><td><code>&lt;object&gt;</code>、<code>&lt;embed&gt;</code></td></tr><tr><td></td><td><code>frame-src</code></td><td><code>&lt;frame&gt;</code>、<code>&lt;iframe&gt;</code></td></tr><tr><td></td><td><code>worker-src</code></td><td><code>Worker</code>、<code>SharedWorker</code>、<code>ServiceWorker</code></td></tr><tr><td></td><td><code>child-src</code></td><td><code>frame-src</code> + <code>worker-src</code></td></tr><tr><td></td><td><code>manifest-src</code></td><td>manifest 文件</td></tr><tr><td></td><td><code>connect-src</code></td><td>script 接口</td></tr><tr><td>文档</td><td><code>base-uri</code></td><td><code>&lt;base&gt;</code></td></tr><tr><td></td><td><code>sandbox</code></td><td>开启沙盒，类似于 <code>&lt;iframe&gt;</code> 的 <code>sandbox</code> 属性</td></tr><tr><td>导航</td><td><code>form-action</code></td><td>表单提交</td></tr><tr><td></td><td><code>frame-ancestors</code></td><td>包含 <code>&lt;frame&gt;</code>、<code>&lt;iframe&gt;</code>、<code>&lt;object&gt;</code>、<code>&lt;embed&gt;</code></td></tr><tr><td>上报</td><td><code>report-to</code></td><td>触发 <code>SecurityPolicyViolationEvent</code> 事件</td></tr><tr><td>其他</td><td><code>upgrade-insecure-requests</code></td><td>自动把 HTTP 切换为 HTTPS</td></tr></tbody></table><table tabindex="0"><thead><tr><th>分类</th><th>取值</th><th>含义</th></tr></thead><tbody><tr><td>关键词</td><td><code>&#39;none&#39;</code></td><td>禁止所有来源</td></tr><tr><td></td><td><code>&#39;self&#39;</code></td><td>同源</td></tr><tr><td></td><td><code>&#39;strict-dynamic&#39;</code></td><td><code>nonce</code>、<code>hash</code></td></tr><tr><td></td><td><code>&#39;report-sample&#39;</code></td><td>上报包括 sample</td></tr><tr><td>不安全关键词</td><td><code>&#39;unsafe-inline&#39;</code></td><td>允许内联资源</td></tr><tr><td></td><td><code>&#39;unsafe-eval&#39;</code></td><td>允许动态执行，比如 <code>eval()</code></td></tr><tr><td></td><td><code>&#39;unsafe-hashes&#39;</code></td><td>允许特定的事件处理函数</td></tr><tr><td>地址</td><td><code>example.com</code></td><td>指定地址</td></tr><tr><td></td><td><code>https://*.example.com:12/path/to/file.js</code></td><td>添加可选的协议、<code>*</code>、端口、路径</td></tr><tr><td></td><td><code>example.com/api/</code></td><td>路径以 <code>/</code> 结尾会匹配所有子路径</td></tr><tr><td></td><td><code>https:</code></td><td>只指定协议，以冒号 <code>:</code> 结尾</td></tr><tr><td></td><td><code>*</code></td><td>所有地址</td></tr><tr><td>其他</td><td><code>&#39;nonce-*&#39;</code></td><td>匹配 nonce 相同的脚本</td></tr><tr><td></td><td><code>&#39;sha*-*&#39;</code></td><td>sha256、sha384、sha512</td></tr></tbody></table><p>指令的多个取值之间用空格分隔，不同指令之间用分号 <code>;</code> 分隔。</p><p>同时指定多个 <code>Content-Security-Policy</code> 会取最严格的规则。</p><h3 id="script-src" tabindex="-1">script-src <a class="header-anchor" href="#script-src" aria-label="Permalink to &quot;script-src&quot;">​</a></h3><p>指定 <code>default-src</code> 或 <code>script-src</code> 后，浏览器会：</p><ul><li>忽略嵌入 <code>&lt;script&gt;</code> 脚本</li><li>忽略 <code>eval()</code> 调用</li><li>忽略 <code>onevent</code> 属性指定的事件处理函数</li></ul><h3 id="style-src" tabindex="-1">style-src <a class="header-anchor" href="#style-src" aria-label="Permalink to &quot;style-src&quot;">​</a></h3><p>指定 <code>default-src</code> 或 <code>style-src</code> 后，浏览器会：</p><ul><li>忽略嵌入 <code>&lt;style&gt;</code> 样式</li><li>忽略 <code>style</code> 属性指定的内联样式</li></ul><h2 id="仅上报模式" tabindex="-1">仅上报模式 <a class="header-anchor" href="#仅上报模式" aria-label="Permalink to &quot;仅上报模式&quot;">​</a></h2><p>设置 <code>Content-Security-Policy-Report-Only</code> 可以让 CSP 不生效、只上报违反 CSP 的情况到指定 URL，用于正式部署 CSP 前的测试。</p><p>上报数据为 <code>Content-Type: application/csp-report</code> 的 JSON：</p><table tabindex="0"><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td><code>blocked-uri</code></td><td></td></tr><tr><td><code>disposition</code></td><td></td></tr><tr><td><code>document-uri</code></td><td></td></tr><tr><td><code>effective-directive</code></td><td></td></tr><tr><td><code>original-policy</code></td><td></td></tr><tr><td><code>script-sample</code></td><td></td></tr><tr><td><code>status-code</code></td><td></td></tr></tbody></table><p>同时指定 <code>Content-Security-Policy</code> 和 <code>Content-Security-Policy-Report-Only</code> 会同时生效。</p><h2 id="客户端配置" tabindex="-1">客户端配置 <a class="header-anchor" href="#客户端配置" aria-label="Permalink to &quot;客户端配置&quot;">​</a></h2><p>使用 <code>&lt;meta&gt;</code> 标签，不支持 <code>report-to</code>。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  http-equiv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Content-Security-Policy&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;default-src &#39;self&#39;; img-src https://*; child-src &#39;none&#39;;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span></code></pre></div>`,25),s=[r];function a(i,l,n,p,h,u){return e(),d("div",null,s)}const k=t(o,[["render",a]]);export{m as __pageData,k as default};
