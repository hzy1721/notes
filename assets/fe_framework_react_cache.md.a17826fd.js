import{_ as e,c as s,o as a,d as n}from"./app.159875a1.js";const C=JSON.parse('{"title":"缓存","description":"","frontmatter":{},"headers":[{"level":2,"title":"useMemo","slug":"usememo","link":"#usememo","children":[]},{"level":2,"title":"useCallback","slug":"usecallback","link":"#usecallback","children":[]},{"level":2,"title":"memo","slug":"memo","link":"#memo","children":[]}],"relativePath":"fe/framework/react/cache.md","lastUpdated":1681868001000}'),l={name:"fe/framework/react/cache.md"},o=n(`<h1 id="缓存" tabindex="-1">缓存 <a class="header-anchor" href="#缓存" aria-hidden="true">#</a></h1><p>组件每次 re-render 都会重新执行函数内语句，并递归执行子组件函数，有时部分语句没必要重新执行，可以添加依赖数组或判断函数来决定是否重新渲染。</p><h2 id="usememo" tabindex="-1">useMemo <a class="header-anchor" href="#usememo" aria-hidden="true">#</a></h2><p>缓存函数计算结果，只有依赖数组变化时才重新计算。</p><ul><li>避免<strong>昂贵计算操作</strong></li><li>避免<strong>接收该值为 prop</strong> 的子组件 re-render</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> cachedValue </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useMemo</span><span style="color:#A6ACCD;">(calculateValue</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dependencies)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="usecallback" tabindex="-1">useCallback <a class="header-anchor" href="#usecallback" aria-hidden="true">#</a></h2><p>缓存函数定义，只有依赖数组变化时才重新定义函数。</p><ul><li>避免<strong>接收该函数为 prop</strong> 的子组件 re-render</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> cachedFn </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useCallback</span><span style="color:#A6ACCD;">(fn</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dependencies)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="memo" tabindex="-1">memo <a class="header-anchor" href="#memo" aria-hidden="true">#</a></h2><p>跳过 prop 变化导致的 re-render。</p><ul><li>避免 <strong>prop 未变化</strong>子组件的 re-render <ul><li>React 默认父组件 re-render 时，所有子组件都 re-render</li></ul></li><li>通过自定义比较函数，跳过<strong>指定情况</strong>下的 re-render</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> MemoizedComponent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">memo</span><span style="color:#A6ACCD;">(SomeComponent</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> arePropsEqual</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">);</span></span>
<span class="line"></span></code></pre></div>`,14),r=[o];function t(p,c,i,d,u,h){return a(),s("div",null,r)}const A=e(l,[["render",t]]);export{C as __pageData,A as default};
