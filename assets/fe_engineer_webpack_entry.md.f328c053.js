import{_ as s,c as n,o as a,U as t}from"./chunks/framework.e548c890.js";const C=JSON.parse('{"title":"entry","description":"","frontmatter":{},"headers":[],"relativePath":"fe/engineer/webpack/entry.md","filePath":"fe/engineer/webpack/entry.md","lastUpdated":1704115023000}'),e={name:"fe/engineer/webpack/entry.md"},o=t(`<h1 id="entry" tabindex="-1">entry <a class="header-anchor" href="#entry" aria-label="Permalink to &quot;entry&quot;">​</a></h1><p>打包的入口文件。</p><h2 id="context" tabindex="-1">context <a class="header-anchor" href="#context" aria-label="Permalink to &quot;context&quot;">​</a></h2><table><thead><tr><th>类型</th><th>含义</th><th>默认值</th></tr></thead><tbody><tr><td><code>string</code></td><td>entry 和 loader 所在目录</td><td>Node 当前工作目录</td></tr></tbody></table><h2 id="entry-1" tabindex="-1">entry <a class="header-anchor" href="#entry-1" aria-label="Permalink to &quot;entry&quot;">​</a></h2><p>打包入口文件，一个 entry 对应一个 chunk/bundle/页面。</p><p>SPA 一个 entry，MPA 多个 entry。</p><table><thead><tr><th>类型</th><th>含义</th><th>默认值</th></tr></thead><tbody><tr><td><code>string</code></td><td><code>main</code> chunk 的入口文件路径</td><td></td></tr><tr><td><code>string[]</code></td><td><code>main</code> chunk 的入口文件路径列表</td><td></td></tr><tr><td><code>{ [key: string]: string }</code></td><td><code>key</code> chunk 对应的入口文件路径</td><td></td></tr><tr><td><code>{ [key: string]: descriptor }</code></td><td><code>key</code> chunk 对应的 entry 配置</td><td></td></tr><tr><td><code>() =&gt; entry</code></td><td>动态 entry，每次 <code>make</code> 事件触发</td><td></td></tr></tbody></table><h3 id="descriptor" tabindex="-1">descriptor <a class="header-anchor" href="#descriptor" aria-label="Permalink to &quot;descriptor&quot;">​</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 示意类型，并不是真的 TS</span></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">descriptor</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 入口文件</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">import</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 输出文件</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">filename</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 依赖的其他 chunk</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">dependOn</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">chunkLoading</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">asyncChunks</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">layer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div>`,10),l=[o];function p(r,c,d,y,i,F){return a(),n("div",null,l)}const h=s(e,[["render",p]]);export{C as __pageData,h as default};
