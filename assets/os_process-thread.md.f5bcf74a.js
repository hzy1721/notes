import{_ as l,c as i,o as e,a}from"./app.7747c6a9.js";const r="/assets/process_status.bfb344a0.jpg",s="/assets/process_memory_layout.9a7029cf.jpg",b=JSON.parse('{"title":"进程和线程","description":"","frontmatter":{},"headers":[{"level":2,"title":"进程 (process)","slug":"进程-process","link":"#进程-process","children":[{"level":3,"title":"进程状态","slug":"进程状态","link":"#进程状态","children":[]},{"level":3,"title":"虚拟地址空间","slug":"虚拟地址空间","link":"#虚拟地址空间","children":[]},{"level":3,"title":"PCB","slug":"pcb","link":"#pcb","children":[]}]},{"level":2,"title":"线程 (thread)","slug":"线程-thread","link":"#线程-thread","children":[]}],"relativePath":"os/process-thread.md"}'),t={name:"os/process-thread.md"},c=a('<h1 id="进程和线程" tabindex="-1">进程和线程 <a class="header-anchor" href="#进程和线程" aria-hidden="true">#</a></h1><h2 id="进程-process" tabindex="-1">进程 (process) <a class="header-anchor" href="#进程-process" aria-hidden="true">#</a></h2><ul><li>进程是资源分配的基本单位。</li><li>一个进程可以包含多个线程，这些线程共享资源。</li><li>进程切换需要保存和设置上下文，开销较大。</li><li>进程的创建和销毁需要分配或回收资源，开销较大。</li><li>进程通信需要使用 IPC，包括管道、消息队列、信号量、共享内存、socket。</li></ul><h3 id="进程状态" tabindex="-1">进程状态 <a class="header-anchor" href="#进程状态" aria-hidden="true">#</a></h3><ul><li>新生 (new)：刚被创建出来，还未完成初始化，不能被调度</li><li>就绪 (ready)：可以被调度，但还未被调度器选择</li><li>运行 (running)：就绪的进程被调度器选择后进入运行状态，运行一段时间后，可以中断其执行转换回就绪状态，如果需要等待某个外部事件则进入阻塞状态，运行结束进入终止状态</li><li>阻塞 (blocked)：进程正在等待某个外部事件 (比如 I/O 请求)，外部事件完成后进入就绪状态</li><li>终止 (terminated)：进程执行结束</li></ul><p><img src="'+r+'" alt=""></p><h3 id="虚拟地址空间" tabindex="-1">虚拟地址空间 <a class="header-anchor" href="#虚拟地址空间" aria-hidden="true">#</a></h3><p>每个进程拥有独立的虚拟内存空间。</p><img src="'+s+'" width="50%"><ul><li>内核部分： <ul><li>位于内核地址空间最顶端，每个进程都映射了相同的内核部分</li><li>用户态时内核部分不可见，进入内核态后才能访问</li><li>由于中断或系统调用进入内核态后，会使用内核栈</li></ul></li><li>用户栈：保存用户态的临时数据，比如函数调用的栈帧，从高地址向低地址扩展</li><li>代码库：进程有时需要调用共享库 (比如 libc)，这些共享库会被映射到用户栈下方，并被标记为只读</li><li>用户堆：保存动态分配的数据，从低地址向高地址扩展</li><li>数据与代码段：从可执行文件中加载而来，数据段主要保存全局变量</li><li>在用户栈和用户堆之间还会映射一些与系统调用相关的区域、用于缓存和共享内存的匿名区域</li><li>查看虚拟地址空间分布：<code>cat /proc/&lt;PID&gt;/maps</code></li></ul><h3 id="pcb" tabindex="-1">PCB <a class="header-anchor" href="#pcb" aria-hidden="true">#</a></h3><p>进程上下文通常称为 PCB (Process Control Block)，主要包括：</p><ul><li>当前运行的状态</li><li>进程号 pid</li><li>父进程号 ppid</li><li>打开的文件描述符</li><li>信号 signal</li></ul><h2 id="线程-thread" tabindex="-1">线程 (thread) <a class="header-anchor" href="#线程-thread" aria-hidden="true">#</a></h2><ul><li>线程是调度的基本单位。</li><li>线程切换只需要保存和设置少量寄存器，开销更小。</li><li>线程的创建和销毁开销更小。</li><li>线程通信可以通过读写同一进程的数据实现，更方便。</li><li>线程同步的方法包括互斥锁、条件变量、信号量、共享内存。</li></ul>',15),d=[c];function h(o,n,p,_,u,m){return e(),i("div",null,d)}const g=l(t,[["render",h]]);export{b as __pageData,g as default};
