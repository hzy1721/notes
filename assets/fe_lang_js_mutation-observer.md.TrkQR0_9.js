import{_ as e,c as a,o as s,a1 as i}from"./chunks/framework.mNpZ2GHZ.js";const b=JSON.parse('{"title":"MutationObserver","description":"","frontmatter":{},"headers":[],"relativePath":"fe/lang/js/mutation-observer.md","filePath":"fe/lang/js/mutation-observer.md","lastUpdated":1702822707000}'),t={name:"fe/lang/js/mutation-observer.md"},o=i('<h1 id="mutationobserver" tabindex="-1">MutationObserver <a class="header-anchor" href="#mutationobserver" aria-label="Permalink to &quot;MutationObserver&quot;">​</a></h1><p><code>MutationObserver</code> 观察 DOM 元素，检测到更改时触发回调。</p><p>创建：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> observer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MutationObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(callback);</span></span></code></pre></div><p>观察 DOM 元素：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">observer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">observe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node, config);</span></span></code></pre></div><ul><li><code>config</code>： <ul><li><code>childList</code>：直接子节点</li><li><code>subtree</code>：所有后代</li><li><code>attributes</code>：元素属性</li><li><code>attributeFilter</code>：属性名数组</li><li><code>characterData</code>：<code>node.data</code></li><li><code>attributeOldValue</code>：将属性的旧值也传给回调，否则只传新值</li><li><code>characterDataOldValue</code>：将 <code>node.data</code> 的旧值也传给回调，否则只传新值</li></ul></li></ul>',7),l=[o];function n(d,r,c,p,h,u){return s(),a("div",null,l)}const g=e(t,[["render",n]]);export{b as __pageData,g as default};
