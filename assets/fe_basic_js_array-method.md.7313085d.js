import{_ as s,c as a,o as l,U as n}from"./chunks/framework.e548c890.js";const A=JSON.parse('{"title":"数组方法","description":"","frontmatter":{},"headers":[],"relativePath":"fe/basic/js/array-method.md","filePath":"fe/basic/js/array-method.md","lastUpdated":1696470698000}'),o={name:"fe/basic/js/array-method.md"},p=n(`<h1 id="数组方法" tabindex="-1">数组方法 <a class="header-anchor" href="#数组方法" aria-label="Permalink to &quot;数组方法&quot;">​</a></h1><h2 id="push" tabindex="-1">push <a class="header-anchor" href="#push" aria-label="Permalink to &quot;push&quot;">​</a></h2><p>在数组末尾添加元素。</p><p><code>push</code> 和 <code>pop</code> 会比较快，只需要修改最后一个元素和 <code>length</code>。</p><p><code>shift</code> 和 <code>unshift</code> 会比较慢，还需要移动剩余元素。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(element0)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(element0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> element1)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(element0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> element1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/* …, */</span><span style="color:#A6ACCD;"> elementN)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="返回值" tabindex="-1">返回值 <a class="header-anchor" href="#返回值" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>添加元素后的数组 <code>length</code>。</p><h2 id="pop" tabindex="-1">pop <a class="header-anchor" href="#pop" aria-label="Permalink to &quot;pop&quot;">​</a></h2><p>删除数组末尾的元素并返回。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">pop</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="返回值-1" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-1" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>被删除的末尾元素。</p><h2 id="shift" tabindex="-1">shift <a class="header-anchor" href="#shift" aria-label="Permalink to &quot;shift&quot;">​</a></h2><p>删除数组开头的元素并返回。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">shift</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="返回值-2" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-2" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>被删除的开头元素。</p><h2 id="unshift" tabindex="-1">unshift <a class="header-anchor" href="#unshift" aria-label="Permalink to &quot;unshift&quot;">​</a></h2><p>在数组开头添加元素。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">unshift</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">unshift</span><span style="color:#A6ACCD;">(element0)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">unshift</span><span style="color:#A6ACCD;">(element0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> element1)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">unshift</span><span style="color:#A6ACCD;">(element0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> element1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/* …, */</span><span style="color:#A6ACCD;"> elementN)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="返回值-3" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-3" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>添加元素后的数组 <code>length</code>。</p><h2 id="splice" tabindex="-1">splice <a class="header-anchor" href="#splice" aria-label="Permalink to &quot;splice&quot;">​</a></h2><p>在指定位置删除并插入元素。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">splice</span><span style="color:#A6ACCD;">(start)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">splice</span><span style="color:#A6ACCD;">(start</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> deleteCount)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">splice</span><span style="color:#A6ACCD;">(start</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> deleteCount</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> item0)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">splice</span><span style="color:#A6ACCD;">(start</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> deleteCount</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> item0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> item1)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">splice</span><span style="color:#A6ACCD;">(start</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> deleteCount</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> item0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> item1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/* …, */</span><span style="color:#A6ACCD;"> itemN)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="返回值-4" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-4" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>被删除元素的数组。</p><h2 id="reverse" tabindex="-1">reverse <a class="header-anchor" href="#reverse" aria-label="Permalink to &quot;reverse&quot;">​</a></h2><p>数组元素倒序。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">reverse</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="返回值-5" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-5" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>原地倒序后的原数组引用。</p><h2 id="sort" tabindex="-1">sort <a class="header-anchor" href="#sort" aria-label="Permalink to &quot;sort&quot;">​</a></h2><p>数组元素排序。</p><p>默认转换为字符串，按照字符的 Unicode 值排序。其他情况需要提供比较函数。</p><p><em>ES2019</em> 规定，<code>sort()</code> 的默认排序算法必须是<strong>稳定</strong>的，已被主流浏览器实现。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">sort</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">sort</span><span style="color:#A6ACCD;">(compareFn)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="返回值-6" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-6" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>原地排序后的原数组引用。</p><h2 id="concat" tabindex="-1">concat <a class="header-anchor" href="#concat" aria-label="Permalink to &quot;concat&quot;">​</a></h2><p>拼接多个数组，返回新数组，不改变原数组。</p><p>如果是数组或包含 <code>Symbol.isConcatSpreadable</code> 属性的对象，拼接所有属性，否则拼接这个值。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">concat</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">concat</span><span style="color:#A6ACCD;">(value0)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">concat</span><span style="color:#A6ACCD;">(value0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> value1)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">concat</span><span style="color:#A6ACCD;">(value0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> value1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/* …, */</span><span style="color:#A6ACCD;"> valueN)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="返回值-7" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-7" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>拼接后的新数组，不改变原数组。</p><h2 id="slice" tabindex="-1">slice <a class="header-anchor" href="#slice" aria-label="Permalink to &quot;slice&quot;">​</a></h2><p>数组切片，返回新数组，不改变原数组，支持负索引。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">slice</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">slice</span><span style="color:#A6ACCD;">(start)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">slice</span><span style="color:#A6ACCD;">(start</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> end)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="返回值-8" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-8" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>切片后的新数组，不改变原数组。</p><h2 id="flat" tabindex="-1">flat <a class="header-anchor" href="#flat" aria-label="Permalink to &quot;flat&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">flat</span><span style="color:#A6ACCD;">(depth)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><ul><li><code>depth</code>：拍平层数，默认是 1 <ul><li>如果想全部拉平，传入 <code>Infinity</code></li></ul></li></ul><h2 id="flatmap" tabindex="-1">flatMap <a class="header-anchor" href="#flatmap" aria-label="Permalink to &quot;flatMap&quot;">​</a></h2><p>等价于先 <code>map</code> 后 <code>flat(1)</code>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">flatMap</span><span style="color:#A6ACCD;">(callbackFn)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">flatMap</span><span style="color:#A6ACCD;">(callbackFn</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> thisArg)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="copywithin" tabindex="-1">copyWithin <a class="header-anchor" href="#copywithin" aria-label="Permalink to &quot;copyWithin&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">copyWithin</span><span style="color:#A6ACCD;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> (start </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> (end </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">length))</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>把 <code>[start, end)</code> 的元素复制到 <code>target</code> 开始的位置。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">copyWithin</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// [4, 5, 3, 4, 5]</span></span></code></pre></div><h2 id="group" tabindex="-1">group <a class="header-anchor" href="#group" aria-label="Permalink to &quot;group&quot;">​</a></h2><ul><li><code>group</code><ul><li>返回对象</li><li>key 会转换为字符串</li></ul></li><li><code>groupToMap</code><ul><li>返回 <code>Map</code></li><li>key 不做转换，可以是对象</li></ul></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> array </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">group</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">num</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">index</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">array</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">num</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">%</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">even</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">odd</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// { odd: [1, 3, 5], even: [2, 4] }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> odd </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">odd</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> even </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">even</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">groupToMap</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">num</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">index</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">array</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">num</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">%</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">even</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">odd</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//  Map { {odd: true}: [1, 3, 5], {even: true}: [2, 4] }</span></span></code></pre></div>`,64),e=[p];function t(c,r,y,i,D,F){return l(),a("div",null,e)}const d=s(o,[["render",t]]);export{A as __pageData,d as default};
