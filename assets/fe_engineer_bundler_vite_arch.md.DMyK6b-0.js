import{_ as e,c as l,o as i,a1 as a}from"./chunks/framework.mNpZ2GHZ.js";const t="/assets/vite-arch.qiMec2SD.webp",b=JSON.parse('{"title":"Vite 架构","description":"","frontmatter":{},"headers":[],"relativePath":"fe/engineer/bundler/vite/arch.md","filePath":"fe/engineer/bundler/vite/arch.md","lastUpdated":1720354129000}'),r={name:"fe/engineer/bundler/vite/arch.md"},o=a('<h1 id="vite-架构" tabindex="-1">Vite 架构 <a class="header-anchor" href="#vite-架构" aria-label="Permalink to &quot;Vite 架构&quot;">​</a></h1><p><img src="'+t+'" alt=""></p><h2 id="esbuild" tabindex="-1">esbuild <a class="header-anchor" href="#esbuild" aria-label="Permalink to &quot;esbuild&quot;">​</a></h2><ol><li>开发阶段预构建 (Bundler) <ul><li>打包第三方依赖，转换为 ESM 格式</li></ul></li><li>开发和生产阶段语法转译 (Transformer) <ul><li>代替 Babel/TSC 转译 TS/JSX</li><li>通过 Vite 插件提供</li><li>不支持类型检查，生产阶段会先执行 TSC</li></ul></li><li>生产阶段代码压缩 (Minifier) <ul><li>通过 Vite 插件提供</li><li>代替很慢的 Terser</li></ul></li></ol><h2 id="rollup" tabindex="-1">Rollup <a class="header-anchor" href="#rollup" aria-label="Permalink to &quot;Rollup&quot;">​</a></h2><ol><li>生产阶段打包 <ul><li>CSS 代码分割</li><li>自动预加载</li><li>异步 chunk 加载优化</li></ul></li><li>兼容插件机制 <ul><li>Vite 插件兼容 Rollup</li><li>Rollup 插件有很多兼容 Vite</li></ul></li></ol>',6),n=[o];function s(u,c,d,_,h,p){return i(),l("div",null,n)}const m=e(r,[["render",s]]);export{b as __pageData,m as default};
