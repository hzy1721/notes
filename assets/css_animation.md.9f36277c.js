import{_ as i,c as e,o as t,a as n}from"./app.caf90d25.js";const m=JSON.parse('{"title":"CSS 动画","description":"","frontmatter":{},"headers":[{"level":2,"title":"transition","slug":"transition","link":"#transition","children":[{"level":3,"title":"transition-property","slug":"transition-property","link":"#transition-property","children":[]},{"level":3,"title":"transition-duration","slug":"transition-duration","link":"#transition-duration","children":[]},{"level":3,"title":"transition-timing-function","slug":"transition-timing-function","link":"#transition-timing-function","children":[]},{"level":3,"title":"transition-delay","slug":"transition-delay","link":"#transition-delay","children":[]},{"level":3,"title":"transitionend 事件","slug":"transitionend-事件","link":"#transitionend-事件","children":[]}]}],"relativePath":"css/animation.md"}'),o={name:"css/animation.md"},a=n('<h1 id="css-动画" tabindex="-1">CSS 动画 <a class="header-anchor" href="#css-动画" aria-hidden="true">#</a></h1><p>有两种 CSS 动画：</p><ul><li><code>transition</code></li><li><code>@keyframes</code></li></ul><h2 id="transition" tabindex="-1">transition <a class="header-anchor" href="#transition" aria-hidden="true">#</a></h2><p>只需要定义以下 4 个属性，即可实现属性值改变时自动应用动画：</p><ul><li><code>transition-property</code></li><li><code>transition-duration</code></li><li><code>transition-timing-function</code></li><li><code>transition-delay</code></li></ul><p>简写属性：<code>transition: property duration timing-function delay</code></p><h3 id="transition-property" tabindex="-1">transition-property <a class="header-anchor" href="#transition-property" aria-hidden="true">#</a></h3><p>大部分 CSS 属性可以应用动画，但不是全部。<code>all</code> 表示应用于所有属性。</p><h3 id="transition-duration" tabindex="-1">transition-duration <a class="header-anchor" href="#transition-duration" aria-hidden="true">#</a></h3><p>动画持续的时间，单位为 s 或 ms。</p><h3 id="transition-timing-function" tabindex="-1">transition-timing-function <a class="header-anchor" href="#transition-timing-function" aria-hidden="true">#</a></h3><p>描述动画进程在时间上的分布，比如先慢后快还是先快后慢。接受 2 种值：三阶贝塞尔曲线、阶跃函数。</p><h4 id="三阶贝塞尔曲线-cubic-bezier-curve" tabindex="-1">三阶贝塞尔曲线 (Cubic bezier curve) <a class="header-anchor" href="#三阶贝塞尔曲线-cubic-bezier-curve" aria-hidden="true">#</a></h4><p>贝塞尔曲线的阶次等于控制点的个数减一，因此三阶贝塞尔曲线需要 4 个控制点。</p><p>第 1 个点固定为 <code>(0, 0)</code>，第 4 个点固定为 <code>(1, 1)</code>，只需要指定中间的两个点。</p><p><code>transition-timing-function: cubic-bezier(x2, y2, x3, y3)</code></p><p>x 表示时间，y 表示过程的完成度。</p><p>CSS 提供几条内建的曲线：</p><ul><li><code>ease</code> (默认值)：<code>(0.25, 0.1, 0.25, 1.0)</code>，稍慢=&gt;快=&gt;慢</li><li><code>ease-in</code>：<code>(0.42, 0, 1.0, 1.0)</code>，慢=&gt;快</li><li><code>ease-out</code>：<code>(0, 0, 0.58, 1.0)</code>，快=&gt;慢</li><li><code>ease-in-out</code>：<code>(0.42, 0, 0.58, 1.0)</code>，慢=&gt;快=&gt;慢</li></ul><p><img src="https://s2.loli.net/2022/07/19/4SJNUPiTwGzAY5K.png" alt="图片"></p><p>x 必须在 <code>[0, 1]</code> 之间，y 的取值没有限制，因此可以使动画超出起点和终点之间的范围。</p><h4 id="阶跃函数-steps-function" tabindex="-1">阶跃函数 (Steps function) <a class="header-anchor" href="#阶跃函数-steps-function" aria-hidden="true">#</a></h4><p>把动画过程分成若干个等长的间隔，进行离散的变化。</p><p><code>transition-timing-function: steps(number of steps[, start/end])</code></p><p><code>start</code> 表示变化发生在每一段的开始，<code>end</code> 表示变化发生在每一段的结尾。</p><p>简写值：</p><ul><li><code>step-start</code>：<code>steps(1, start)</code>，只有 1 段且立即开始，相当于没有动画。</li><li><code>step-end</code>：<code>steps(1, end)</code>，只有 1 段，<code>duration</code> 时长后发生变化，相当于只有延时效果。</li></ul><h3 id="transition-delay" tabindex="-1">transition-delay <a class="header-anchor" href="#transition-delay" aria-hidden="true">#</a></h3><p>动画开始前的延迟时间，单位为 s 或 ms。设为负数表示跳过一段时间的动画，从中间开始播放动画。</p><h3 id="transitionend-事件" tabindex="-1">transitionend 事件 <a class="header-anchor" href="#transitionend-事件" aria-hidden="true">#</a></h3><p>动画完成后，会触发 <code>transitionend</code> 事件。</p><p>事件对象有几个特定属性：</p><ul><li><code>propertyName</code>：完成动画的属性名。</li><li><code>elapsedTime</code>：动画完成的时间 (s)，不包括 <code>delay</code>。</li></ul>',34),d=[a];function r(c,s,l,p,h,u){return t(),e("div",null,d)}const _=i(o,[["render",r]]);export{m as __pageData,_ as default};
