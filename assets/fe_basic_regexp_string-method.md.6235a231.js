import{_ as e,c as t,o as r,d as a}from"./app.01ac5356.js";const u=JSON.parse('{"title":"字符串方法","description":"","frontmatter":{},"headers":[{"level":2,"title":"str.match","slug":"str-match","link":"#str-match","children":[]},{"level":2,"title":"str.matchAll","slug":"str-matchall","link":"#str-matchall","children":[]},{"level":2,"title":"str.split","slug":"str-split","link":"#str-split","children":[]},{"level":2,"title":"str.search","slug":"str-search","link":"#str-search","children":[]},{"level":2,"title":"str.replace","slug":"str-replace","link":"#str-replace","children":[]},{"level":2,"title":"str.replaceAll","slug":"str-replaceall","link":"#str-replaceall","children":[]}],"relativePath":"fe/basic/regexp/string-method.md","lastUpdated":1681116875000}'),d={name:"fe/basic/regexp/string-method.md"},l=a('<h1 id="字符串方法" tabindex="-1">字符串方法 <a class="header-anchor" href="#字符串方法" aria-hidden="true">#</a></h1><p><code>String</code> 有一些方法接收正则表达式。</p><h2 id="str-match" tabindex="-1">str.match <a class="header-anchor" href="#str-match" aria-hidden="true">#</a></h2><p><code>String.prototype.match(regexp)</code></p><p>有 3 种匹配结果：</p><ul><li>没有修饰符 <code>g</code>：返回包含第一个匹配结果的数组 <code>res</code><ul><li><code>res[0]</code>：匹配结果</li><li><code>res.index</code>：匹配位置</li><li><code>res.input</code>：原字符串</li></ul></li><li>有修饰符 <code>g</code>：返回所有匹配结果的数组 <code>res</code></li><li>无匹配项：返回 <code>null</code></li></ul><h2 id="str-matchall" tabindex="-1">str.matchAll <a class="header-anchor" href="#str-matchall" aria-hidden="true">#</a></h2><h2 id="str-split" tabindex="-1">str.split <a class="header-anchor" href="#str-split" aria-hidden="true">#</a></h2><h2 id="str-search" tabindex="-1">str.search <a class="header-anchor" href="#str-search" aria-hidden="true">#</a></h2><h2 id="str-replace" tabindex="-1">str.replace <a class="header-anchor" href="#str-replace" aria-hidden="true">#</a></h2><p><code>String.prototype.replace(regexp, replacement)</code></p><p><code>replacement</code> 支持特定的字符组合来插入内容：</p><table><thead><tr><th>字符组合</th><th>含义</th></tr></thead><tbody><tr><td><code>$&amp;</code></td><td>匹配项</td></tr><tr><td><code>$`</code></td><td>匹配项之前的字符串</td></tr><tr><td><code>$&#39;</code></td><td>匹配项之后的字符串</td></tr><tr><td><code>$n</code></td><td>第 n 个分组</td></tr><tr><td><code>$&lt;name&gt;</code></td><td><code>name</code> 分组</td></tr><tr><td><code>$$</code></td><td>字符 <code>$</code></td></tr></tbody></table><h2 id="str-replaceall" tabindex="-1">str.replaceAll <a class="header-anchor" href="#str-replaceall" aria-hidden="true">#</a></h2>',14),c=[l];function s(i,h,o,n,p,m){return r(),t("div",null,c)}const g=e(d,[["render",s]]);export{u as __pageData,g as default};
