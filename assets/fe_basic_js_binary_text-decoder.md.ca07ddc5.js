import{_ as e,c as s,o,d as a}from"./app.07c45ef7.js";const A=JSON.parse('{"title":"TextDecoder","description":"","frontmatter":{},"headers":[],"relativePath":"fe/basic/js/binary/text-decoder.md","lastUpdated":1680593177000}'),l={name:"fe/basic/js/binary/text-decoder.md"},n=a(`<h1 id="textdecoder" tabindex="-1">TextDecoder <a class="header-anchor" href="#textdecoder" aria-hidden="true">#</a></h1><p><code>TextDecoder</code> 把 buffer 解码为字符串。</p><p>创建 <code>TextDecoder</code>：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> decoder </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">TextDecoder</span><span style="color:#A6ACCD;">([label]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [options])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><ul><li><code>label</code>：编码格式，默认 <code>utf-8</code></li><li><code>options</code>： <ul><li><code>fatal</code>：设为 <code>true</code> 碰到无效字符抛出异常，否则用 <code>\\uFFFD</code> 替换无效字符</li><li><code>ignoreBOM</code>：设为 <code>true</code> 忽略 BOM</li></ul></li></ul><p>解码：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> decoder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">decode</span><span style="color:#A6ACCD;">([input]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [options])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><ul><li><code>input</code>：被解码的 buffer</li><li><code>options</code>： <ul><li><code>stream</code>：适用于解码流，上一个 buffer 末尾解码不完全的字节会被拼接到下一个 buffer</li></ul></li></ul>`,8),t=[n];function c(p,d,r,i,D,u){return o(),s("div",null,t)}const _=e(l,[["render",c]]);export{A as __pageData,_ as default};
