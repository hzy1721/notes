import{_ as s,c as i,o as a,a1 as e}from"./chunks/framework.mNpZ2GHZ.js";const g=JSON.parse('{"title":"字符串方法","description":"","frontmatter":{},"headers":[],"relativePath":"fe/lang/regexp/string-method.md","filePath":"fe/lang/regexp/string-method.md","lastUpdated":1702822707000}'),l={name:"fe/lang/regexp/string-method.md"},t=e(`<h1 id="字符串方法" tabindex="-1">字符串方法 <a class="header-anchor" href="#字符串方法" aria-label="Permalink to &quot;字符串方法&quot;">​</a></h1><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1 2 3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">search</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[1-3]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[1-3]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [&#39;1&#39;, index: 0, input: &#39;1 2 3&#39;, groups: undefined]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[1-3]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matchAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[1-3]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   [&#39;1&#39;, index: 0, input: &#39;1 2 3&#39;, groups: undefined],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   [&#39;2&#39;, index: 2, input: &#39;1 2 3&#39;, groups: undefined],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   [&#39;3&#39;, index: 4, input: &#39;1 2 3&#39;, groups: undefined],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[1-3]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[$&amp;]&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;[1] 2 3&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replaceAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[1-3]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">groups</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(match, index, input, groups);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 1 0 1 2 3 undefined</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 2 2 1 2 3 undefined</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 3 4 1 2 3 undefined</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`[\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">match</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}]\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;[1] [2] [3]&#39;</span></span></code></pre></div><h2 id="search" tabindex="-1">search <a class="header-anchor" href="#search" aria-label="Permalink to &quot;search&quot;">​</a></h2><p>第一个匹配结果的起始索引。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">search</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regexp);</span></span></code></pre></div><ul><li><code>regexp</code>： <ul><li><code>RegExp</code> 对象或拥有 <code>Symbol.search</code> 方法的对象</li><li>否则通过 <code>new RegExp(regexp)</code> 转为 <code>RegExp</code> 对象</li></ul></li></ul><p>返回结果：匹配结果的起始索引或 <code>-1</code> (匹配失败)。</p><h2 id="match" tabindex="-1">match <a class="header-anchor" href="#match" aria-label="Permalink to &quot;match&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regexp);</span></span></code></pre></div><ul><li><code>regexp</code>： <ul><li><code>RegExp</code> 对象或拥有 <code>Symbol.match</code> 方法的对象</li><li>否则通过 <code>new RegExp(regexp)</code> 转为 <code>RegExp</code> 对象</li><li><code>undefined</code> 返回 <code>[&#39;&#39;]</code>，等价于 <code>match(/(?:)/)</code></li></ul></li></ul><p>返回结果：</p><ul><li>没有修饰符 <code>g</code>：与 <code>exec</code> 的结果相同 <ul><li><code>res[0]</code>：匹配结果</li><li><code>res[1...N]</code>：N 个捕获组</li><li><code>res.index</code>：匹配的起始索引</li><li><code>res.input</code>：原始字符串</li><li><code>res.groups</code>：命名捕获组</li></ul></li><li>有修饰符 <code>g</code>：所有匹配结果字符串的数组，相当于多次调用 <code>exec</code> 只取 <code>res[0]</code></li><li>无匹配项：返回 <code>null</code></li></ul><h2 id="matchall" tabindex="-1">matchAll <a class="header-anchor" href="#matchall" aria-label="Permalink to &quot;matchAll&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matchAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regexp);</span></span></code></pre></div><ul><li><code>regexp</code>： <ul><li><code>RegExp</code> 对象或拥有 <code>Symbol.match</code> 方法的对象 <ul><li>必须设置 <code>g</code> 修饰符，否则 <code>TypeError</code></li></ul></li><li>否则通过 <code>new RegExp(regexp, &#39;g&#39;)</code> 转为 <code>RegExp</code> 对象</li></ul></li></ul><p>返回结果：</p><ul><li>所有匹配结果的可迭代对象，元素是 <code>exec</code> 的返回结果 <ul><li><code>res[0]</code>：匹配结果</li><li><code>res[1...N]</code>：N 个捕获组</li><li><code>res.index</code>：匹配的起始索引</li><li><code>res.input</code>：原始字符串</li><li><code>res.groups</code>：命名捕获组</li></ul></li></ul><h2 id="replace" tabindex="-1">replace <a class="header-anchor" href="#replace" aria-label="Permalink to &quot;replace&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pattern, replacement);</span></span></code></pre></div><ul><li><code>pattern</code>： <ul><li>字符串</li><li>拥有 <code>Symbol.replace</code> 方法的对象，通常是 <code>RegExp</code></li><li>否则转为字符串</li></ul></li><li><code>replacement</code>： <ul><li>字符串：用于代替匹配结果，支持转义序列</li><li>函数：每次匹配成功时调用，返回值作为替换结果</li></ul></li></ul><table tabindex="0"><thead><tr><th>转义序列</th><th>含义</th></tr></thead><tbody><tr><td><code>$&amp;</code></td><td>匹配项</td></tr><tr><td><code>$\`</code></td><td>匹配项之前的字符串</td></tr><tr><td><code>$&#39;</code></td><td>匹配项之后的字符串</td></tr><tr><td><code>$n</code></td><td>第 n 个捕获组</td></tr><tr><td><code>$&lt;name&gt;</code></td><td>名称为 <code>name</code> 的捕获组</td></tr><tr><td><code>$$</code></td><td>字符 <code>$</code></td></tr></tbody></table><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 对应于 res[0]、res[1..N]、index、input、groups</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> replacer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">p1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">p2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* …, */</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">groups</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> replacement;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="replaceall" tabindex="-1">replaceAll <a class="header-anchor" href="#replaceall" aria-label="Permalink to &quot;replaceAll&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replaceAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pattern, replacement);</span></span></code></pre></div><ul><li><code>pattern</code>： <ul><li>字符串</li><li>拥有 <code>Symbol.replace</code> 方法的对象，通常是 <code>RegExp</code></li><li>否则转为字符串</li><li>正则必须有 <code>g</code> 修饰符，否则 <code>TypeError</code></li></ul></li><li><code>replacement</code>： <ul><li>字符串：用于代替匹配结果，支持一些转义序列</li><li>函数：每次匹配成功时调用，返回值作为替换结果</li></ul></li></ul><h2 id="split" tabindex="-1">split <a class="header-anchor" href="#split" aria-label="Permalink to &quot;split&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(separator);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(separator, limit);</span></span></code></pre></div><ul><li><code>separator</code>： <ul><li>字符串或拥有 <code>Symbol.split</code> 方法的对象 (比如 <code>RegExp</code>)</li><li><code>undefined</code> 返回包含字符串的单元素数组</li></ul></li><li><code>limit</code>： <ul><li>返回结果的最多数量，多出的部分会被忽略</li></ul></li></ul><p>返回结果：</p><ul><li>字符串数组，在 <code>separator</code> 出现的地方进行分割</li></ul>`,30),n=[t];function h(p,d,k,r,c,o){return a(),i("div",null,n)}const y=s(l,[["render",h]]);export{g as __pageData,y as default};
