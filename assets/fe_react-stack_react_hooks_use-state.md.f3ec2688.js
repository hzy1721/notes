import{_ as s,c as a,o as n,d as e}from"./app.eb4dc0a0.js";const C=JSON.parse('{"title":"useState","description":"","frontmatter":{},"headers":[{"level":2,"title":"状态更新","slug":"状态更新","link":"#状态更新","children":[]},{"level":2,"title":"嵌套对象","slug":"嵌套对象","link":"#嵌套对象","children":[]},{"level":2,"title":"更新数组","slug":"更新数组","link":"#更新数组","children":[]},{"level":2,"title":"状态上移","slug":"状态上移","link":"#状态上移","children":[]}],"relativePath":"fe/react-stack/react/hooks/use-state.md","lastUpdated":1684229449000}'),l={name:"fe/react-stack/react/hooks/use-state.md"},t=e(`<h1 id="usestate" tabindex="-1">useState <a class="header-anchor" href="#usestate" aria-hidden="true">#</a></h1><p><code>useState</code> 声明一个状态变量，传入初始值，返回状态变量与修改状态值的 setter 函数。</p><ul><li>初始值可以是任意类型</li><li>通过解构语法为返回的变量和 setter 函数赋予合适的名称</li><li>多次调用返回的状态变量是独立的</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> setState</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useState</span><span style="color:#A6ACCD;">(initialState)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="状态更新" tabindex="-1">状态更新 <a class="header-anchor" href="#状态更新" aria-hidden="true">#</a></h2><p>每次渲染的 state 是固定不变的，调用 setState 不会修改 state 的值，而是触发一次重新渲染，在重新执行的组件函数内 <code>useState</code> 返回的 state 才会变为新值。</p><p>调用一次 setState 不会立即开始重新渲染，而是等待当前宏任务执行完后统一进行渲染，可以合并多次状态更新 (batching)，提高性能。</p><p>setState 可以传入函数，参数是上一次更新后的状态，可以实现同一个状态的多次更新。</p><h2 id="嵌套对象" tabindex="-1">嵌套对象 <a class="header-anchor" href="#嵌套对象" aria-hidden="true">#</a></h2><p>对于嵌套层数比较多的对象，虽然也可以用扩展语法 <code>...</code> 更新，但可能会比较麻烦。可以尝试使用 <code>useImmer</code> 代替 <code>useState</code>，使用返回的 <code>updateState</code> 函数更新对象，写法更简洁方便。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useImmer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">use-immer</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">person</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> updatePerson</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useImmer</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Niki de Saint Phalle</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">artwork</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Blue Nana</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">city</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hamburg</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">image</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">https://i.imgur.com/Sd1AgUOm.jpg</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">updatePerson</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">draft</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">draft</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">artwork</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">title</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="更新数组" tabindex="-1">更新数组 <a class="header-anchor" href="#更新数组" aria-hidden="true">#</a></h2><p>避免使用修改数组的方法，总是使用返回新数组的方法。或者使用 <code>useImmer</code> 代替 <code>useState</code>，可以使用所有方法。</p><table><thead><tr><th></th><th>avoid (修改原数组)</th><th>prefer (返回新数组)</th></tr></thead><tbody><tr><td>添加</td><td>push, unshift</td><td>concat, [...arr]</td></tr><tr><td>删除</td><td>pop, shift, splice</td><td>filter, slice</td></tr><tr><td>替换</td><td>splice, arr[i] = ...</td><td>map</td></tr><tr><td>排序</td><td>reverse, sort</td><td>先复制为新数组再调用方法</td></tr></tbody></table><h2 id="状态上移" tabindex="-1">状态上移 <a class="header-anchor" href="#状态上移" aria-hidden="true">#</a></h2><p>如果需要在两个或多个组件之间共享状态数据，可以把状态定义上移到最近的公共祖先组件，然后通过 <code>props</code> 或 <code>Context</code> 将状态变量传递到需要的后代组件。</p>`,18),p=[t];function o(c,r,D,i,d,y){return n(),a("div",null,p)}const A=s(l,[["render",o]]);export{C as __pageData,A as default};
