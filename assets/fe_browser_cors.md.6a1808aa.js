import{_ as e,c as s,o as l,d as o}from"./app.e4b9fdbe.js";const u=JSON.parse('{"title":"CORS","description":"","frontmatter":{},"headers":[{"level":2,"title":"简单请求","slug":"简单请求","link":"#简单请求","children":[{"level":3,"title":"Cookie","slug":"cookie","link":"#cookie","children":[]}]},{"level":2,"title":"非简单请求","slug":"非简单请求","link":"#非简单请求","children":[{"level":3,"title":"预检请求 (preflight)","slug":"预检请求-preflight","link":"#预检请求-preflight","children":[]},{"level":3,"title":"正式通信","slug":"正式通信","link":"#正式通信","children":[]}]}],"relativePath":"fe/browser/cors.md"}'),a={name:"fe/browser/cors.md"},n=o(`<h1 id="cors" tabindex="-1">CORS <a class="header-anchor" href="#cors" aria-hidden="true">#</a></h1><p>CORS (Cross-Origin Resource Sharing，跨域资源共享) 是解决浏览器跨域问题最常用的方法。</p><p>根据是否需要发送预检请求 (preflight) 将 CORS 请求分为 2 类：</p><ul><li>简单请求 (simple request)</li><li>非简单请求 (not-so-simple request)</li></ul><h2 id="简单请求" tabindex="-1">简单请求 <a class="header-anchor" href="#简单请求" aria-hidden="true">#</a></h2><p>满足以下 2 个条件的请求为简单请求：</p><ul><li>请求方法是 <code>GET/HEAD/POST</code> 之一</li><li>请求头只包含以下几种： <ul><li><code>Accept</code></li><li><code>Accept-Language</code></li><li><code>Content-Language</code></li><li><code>Last-Event-ID</code></li><li><code>Content-Type</code> (只支持以下 3 个值) <ul><li><code>application/x-www-form-urlencoded</code></li><li><code>multipart/form-data</code></li><li><code>text/plain</code></li></ul></li></ul></li></ul><p>对于简单请求，浏览器在请求头中添加一个 <code>Origin</code> 字段，表明当前页面的 URL：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">Origin: http://localhost:5173</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>如果服务端没有配置 CORS 或 <code>Origin</code> 的值不在允许的 URL 列表中，则返回不包含额外响应头的 HTTP 响应。浏览器发现响应头没有 <code>Access-Control-Allow-Origin</code> 字段，说明跨域请求不被服务端支持，则抛出一个错误。</p><p>对于服务端支持的 <code>Origin</code>，响应头可能包含以下额外字段：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">Access-Control-Allow-Origin: http://localhost:5173</span></span>
<span class="line"><span style="color:#A6ACCD;">Access-Control-Allow-Credentials: true</span></span>
<span class="line"><span style="color:#A6ACCD;">Access-Control-Expose-Headers: FooBar</span></span>
<span class="line"><span style="color:#A6ACCD;">Content-Type: text/html; charset=utf-8</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><ul><li><code>Access-Control-Allow-Origin</code>：服务端允许请求的 URL，取值为 <code>Origin</code> 的值或一个星号 <code>*</code>（允许所有 URL）</li><li><code>Access-Control-Allow-Credentials</code>：CORS 请求默认不发送 Cookie，设为 <code>true</code> 表示服务端允许发送 Cookie <ul><li>不能设为 <code>false</code>，如果不允许 Cookie，不包含这个字段即可</li></ul></li><li><code>Access-Control-Expose-Headers</code>：可选字段，CORS 请求默认只能拿到响应头的 6 个基本字段，可以在此处指定允许访问的其他字段 <ul><li><code>Cache-Control</code></li><li><code>Content-Language</code></li><li><code>Content-Type</code></li><li><code>Expires</code></li><li><code>Last-Modified</code></li><li><code>Pragma</code></li></ul></li></ul><h3 id="cookie" tabindex="-1">Cookie <a class="header-anchor" href="#cookie" aria-hidden="true">#</a></h3><p>如果要通过 CORS 请求发送 Cookie，需要：</p><ul><li>服务端设置 <code>Access-Control-Allow-Credentials</code> 为 <code>true</code></li><li><code>Access-Control-Allow-Origin</code> 是具体的 URL，不能为 <code>*</code></li><li>在 AJAX 中设置：</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> xhr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">XMLHttpRequest</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">withCredentials </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 发送 Cookie</span></span>
<span class="line"><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">withCredentials </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 禁止 Cookie</span></span>
<span class="line"></span></code></pre></div><h2 id="非简单请求" tabindex="-1">非简单请求 <a class="header-anchor" href="#非简单请求" aria-hidden="true">#</a></h2><p>不属于简单请求的为非简单请求，通常是 <code>PUT/DELETE</code> 方法或 <code>Content-Type</code> 为 <code>application/json</code>。</p><h3 id="预检请求-preflight" tabindex="-1">预检请求 (preflight) <a class="header-anchor" href="#预检请求-preflight" aria-hidden="true">#</a></h3><p>在正式请求之前发送一次额外请求，使用 <code>OPTIONS</code> 方法询问服务端当前 URL 是否被允许、允许的方法和请求头。</p><p>预检请求的请求头包含以下额外字段：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">Origin: http://localhost:5173</span></span>
<span class="line"><span style="color:#A6ACCD;">Access-Control-Request-Method: PUT</span></span>
<span class="line"><span style="color:#A6ACCD;">Access-Control-Request-Headers: X-Custom-Header</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><ul><li><code>Origin</code>：发送方 URL</li><li><code>Access-Control-Request-Method</code>：非简单请求计划使用的方法</li><li><code>Access-Control-Request-Headers</code>：可能发送的额外字段</li></ul><p>如果服务端允许这三条要求，则发回有额外响应头的报文：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">Access-Control-Allow-Origin: http://localhost:5173</span></span>
<span class="line"><span style="color:#A6ACCD;">Access-Control-Allow-Methods: GET, POST, PUT</span></span>
<span class="line"><span style="color:#A6ACCD;">Access-Control-Allow-Headers: X-Custom-Header</span></span>
<span class="line"><span style="color:#A6ACCD;">Access-Control-Allow-Credentials: true</span></span>
<span class="line"><span style="color:#A6ACCD;">Access-Control-Max-Age: 1728000</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><ul><li><code>Access-Control-Allow-Origin</code>：服务端允许请求的 URL，取值为 <code>Origin</code> 的值或一个星号 <code>*</code>（允许所有 URL）</li><li><code>Access-Control-Allow-Methods</code>：服务端允许的所有方法，不限于 <code>Access-Control-Request-Method</code> 中的方法</li><li><code>Access-Control-Allow-Headers</code>：服务端允许的所有 Header，不限于 <code>Access-Control-Allow-Headers</code> 中的 Header</li><li><code>Access-Control-Allow-Credentials</code>：CORS 请求默认不发送 Cookie，设为 <code>true</code> 表示服务端允许发送 Cookie</li><li><code>Access-Control-Max-Age</code>：本次预检请求的有效期，以秒为单位</li></ul><p>如果服务端不支持这次跨域请求，则返回不包含以上额外响应头的报文。</p><h3 id="正式通信" tabindex="-1">正式通信 <a class="header-anchor" href="#正式通信" aria-hidden="true">#</a></h3><p>通过预检请求后，后续的 CORS 请求与简单请求的交互过程相同，请求头会包含 <code>Origin</code>，响应头会包含 <code>Access-Control-Allow-Origin</code> 等。</p>`,30),c=[n];function t(i,p,r,d,C,A){return l(),s("div",null,c)}const g=e(a,[["render",t]]);export{u as __pageData,g as default};
