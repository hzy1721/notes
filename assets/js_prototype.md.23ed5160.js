import{_ as s,c as a,o,a as n}from"./app.7747c6a9.js";const e="/assets/Rabbit.0c1936ac.png",p="/assets/Object.prototype.fae50f1b.png",b=JSON.parse('{"title":"原型","description":"","frontmatter":{},"headers":[{"level":2,"title":"什么是原型","slug":"什么是原型","link":"#什么是原型","children":[]},{"level":2,"title":"构造函数与原型","slug":"构造函数与原型","link":"#构造函数与原型","children":[]},{"level":2,"title":"默认原型","slug":"默认原型","link":"#默认原型","children":[]},{"level":2,"title":"Object.prototype","slug":"object-prototype","link":"#object-prototype","children":[]},{"level":2,"title":"Object.create","slug":"object-create","link":"#object-create","children":[]}],"relativePath":"js/prototype.md"}'),l={name:"js/prototype.md"},t=n(`<h1 id="原型" tabindex="-1">原型 <a class="header-anchor" href="#原型" aria-hidden="true">#</a></h1><p>JavaScript 通过原型 (prototype) 支持 OOP 中的继承。</p><h2 id="什么是原型" tabindex="-1">什么是原型 <a class="header-anchor" href="#什么是原型" aria-hidden="true">#</a></h2><p>JavaScript 中的每个对象有一个隐藏属性 <code>[[Prototype]]</code>，称为该对象的<strong>原型</strong>。隐藏属性指的是 JS 引擎内部维护该属性，用户代码无法<strong>直接</strong>访问。原型的值要么为 <code>null</code>，要么为另一个对象。</p><p>原型对象也可以有原型，这样就构成了一条<strong>原型链</strong> (prototype chain)。原型链上的所有属性都会被对象所<strong>继承</strong>。访问属性时首先查找对象的自有属性，然后查找原型属性。设置属性只针对对象本身，不会修改原型链。</p><p>有 2 种方法读写对象的原型：</p><ul><li><code>__proto__</code> 属性 <ul><li>需要注意的是，<code>__proto__</code> 只是 <code>[[Prototype]]</code> 的 getter/setter</li></ul></li><li><code>Object.getPrototypeOf/Object.setPrototypeOf</code> 方法</li></ul><h2 id="构造函数与原型" tabindex="-1">构造函数与原型 <a class="header-anchor" href="#构造函数与原型" aria-hidden="true">#</a></h2><p>除了手动设置对象的原型实现继承之外，更多的是让一个类型继承另一个类型，从而使子类型的所有对象都能继承父类型的属性。JavaScript 中使用构造函数定义一个类型 (假设是 <code>F</code>)，使用 <code>new F(args)</code> 创建该类型的对象。</p><p>构造函数 <code>F</code> 可以设置一个属性 <code>prototype</code>，使用 <code>new</code> 操作符创建对象时，如果 <code>F.prototype</code> 是一个对象，则会把这个对象设置为新创建对象的原型 <code>[[Prototype]]</code>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> animal </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">eats</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Rabbit</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#FFCB6B;">Rabbit</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> animal</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> rabbit </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Rabbit</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">White Rabbit</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// rabbit.__proto__ === animal</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(rabbit</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">eats)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre></div><h2 id="默认原型" tabindex="-1">默认原型 <a class="header-anchor" href="#默认原型" aria-hidden="true">#</a></h2><p>每个函数默认存在 <code>prototype</code> 属性，是只有一个属性 <code>constructor</code> 的对象，值为函数本身。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Rabbit</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">Rabbit</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// { constructor: Rabbit }</span></span>
<span class="line"></span></code></pre></div><p><img src="`+e+`" alt=""></p><p><code>constructor</code> 的值可以被所有 <code>Rabbit</code> 创建出的对象访问，因此可以使用与一个对象相同的构造函数创建另一个对象。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> rabbit </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Rabbit</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">White Rabbit</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> rabbit2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> rabbit</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">constructor</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Black Rabbit</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>为了不覆盖 <code>constructor</code> 这一有用的属性，修改函数的 <code>prototype</code> 时尽量不要完全替换，而是往上面添加属性，或者完全替换后手动加上 <code>constructor</code>。</p><h2 id="object-prototype" tabindex="-1">Object.prototype <a class="header-anchor" href="#object-prototype" aria-hidden="true">#</a></h2><p>原型通常用于提供该类型的一些实用函数，比如 <code>toString</code>、<code>forEach</code> 等。使得一个该类型的空对象 (没有自有属性) 可以直接调用这些实用函数。</p><p>JavaScript 编程中使用的对象绝大部分都直接或间接继承自 <code>Object.prototype</code>，该原型提供了大量适用于对象的实用函数。</p><p>其他内建类型，比如 <code>Array</code>、<code>Date</code>、<code>Function</code> 等，都提供了自己的原型方法，而这些原型对象 (<code>Array.prototype</code> 等) 自身也是对象，它们的原型为 <code>Object.prototype</code>。</p><p><img src="`+p+`" alt=""></p><h2 id="object-create" tabindex="-1">Object.create <a class="header-anchor" href="#object-create" aria-hidden="true">#</a></h2><p>创建对象时指定原型的方法有 2 种：</p><ul><li>字面量中包括 <code>__proto__</code></li><li><code>Object.create(proto)</code></li></ul><p><code>Object.create(proto, propertiesObject)</code> 也可以用于拷贝一个对象 (浅拷贝)，包括自有属性和原型 (继承属性)，自有属性包括可枚举和不可枚举的、数据属性和访问器属性，真正做到了<strong>完全拷贝</strong>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> clone </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getPrototypeOf</span><span style="color:#A6ACCD;">(obj)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getOwnPropertyDescriptors</span><span style="color:#A6ACCD;">(obj)</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,28),c=[t];function r(y,i,D,d,A,F){return o(),a("div",null,c)}const h=s(l,[["render",r]]);export{b as __pageData,h as default};
