import{_ as l,c as i,o as e,a as t}from"./app.68ea3551.js";const a="/assets/design-pattern.07335292.png",f=JSON.parse('{"title":"设计模式","description":"","frontmatter":{},"headers":[{"level":2,"title":"浏览器中的设计模式","slug":"浏览器中的设计模式","link":"#浏览器中的设计模式","children":[]},{"level":2,"title":"JS 中的设计模式","slug":"js-中的设计模式","link":"#js-中的设计模式","children":[]}],"relativePath":"design/pattern.md"}'),r={name:"design/pattern.md"},s=t('<h1 id="设计模式" tabindex="-1">设计模式 <a class="header-anchor" href="#设计模式" aria-hidden="true">#</a></h1><p>共 23 种设计模式。</p><p>分为三类：</p><ul><li>创建型：创建一个对象 <ul><li>单例模式 (Singleton)</li><li>原型模式 (Prototype)</li></ul></li><li>结构型：将对象组合成更大的结构 <ul><li>代理模式 (Proxy)</li></ul></li><li>行为型：对象之间的通信和职责分工 <ul><li>观察者模式 (Observer)</li><li>迭代器模式 (Iterator)</li></ul></li></ul><p><img src="'+a+'" alt=""></p><h2 id="浏览器中的设计模式" tabindex="-1">浏览器中的设计模式 <a class="header-anchor" href="#浏览器中的设计模式" aria-hidden="true">#</a></h2><ul><li>单例模式 <ul><li>缓存、全局状态管理</li></ul></li><li>观察者模式 <ul><li>响应式数据</li></ul></li></ul><h2 id="js-中的设计模式" tabindex="-1">JS 中的设计模式 <a class="header-anchor" href="#js-中的设计模式" aria-hidden="true">#</a></h2><ul><li>原型模式 <ul><li>JS 创建对象的基本模式</li></ul></li><li>代理模式 <ul><li>ES6 引入的 Proxy 类型、前端监控、网络代理</li></ul></li><li>迭代器模式 <ul><li>ES6 引入的可迭代对象</li></ul></li></ul>',9),n=[s];function o(d,u,c,_,h,p){return e(),i("div",null,n)}const m=l(r,[["render",o]]);export{f as __pageData,m as default};
