import{_ as l,c as i,o as e,a1 as t}from"./chunks/framework.mNpZ2GHZ.js";const f=JSON.parse('{"title":"脚手架概述","description":"","frontmatter":{},"headers":[],"relativePath":"fe/library/scaffold/overview.md","filePath":"fe/library/scaffold/overview.md","lastUpdated":1698932990000}'),a={name:"fe/library/scaffold/overview.md"},r=t('<h1 id="脚手架概述" tabindex="-1">脚手架概述 <a class="header-anchor" href="#脚手架概述" aria-label="Permalink to &quot;脚手架概述&quot;">​</a></h1><p>脚手架用于创建指定类型的新项目，使用哪种脚手架取决于项目的核心技术栈，这些核心库通常会提供相应的脚手架工具。</p><p>UI 库：</p><ul><li>React <ul><li>create-react-app：已废弃</li></ul></li><li>Vue <ul><li>create-vue</li></ul></li></ul><p>打包器：</p><ul><li>webpack <ul><li>webpack-cli</li></ul></li><li>Vite <ul><li>create-vite</li></ul></li></ul><p>前端框架：</p><ul><li>Next <ul><li>create-next-app</li></ul></li></ul><p>但是第三方库提供的脚手架只包括核心库和一些基础配置，对于其他必备的工具没有做过多约定：</p><ul><li>CSS 方案：预处理器、Tailwind、CSS-in-JS</li><li>路由库</li><li>网络请求库</li><li>状态管理库</li><li>语法检查：eslint、stylelint、commitlint</li><li>打包配置与优化</li></ul><p>尽管有 Next 这种大而全的框架，但是官方提供的脚手架配置和模板能力难以满足公司和团队复杂的定制化需求，因此需要由中台或团队维护自己的脚手架工具，保证项目结构的一致性、避免创建项目时的重复操作、提高研发效率。</p><h2 id="脚手架配置关注点" tabindex="-1">脚手架配置关注点 <a class="header-anchor" href="#脚手架配置关注点" aria-label="Permalink to &quot;脚手架配置关注点&quot;">​</a></h2><ul><li>包管理器 <ul><li>npm/yarn/pnpm</li></ul></li><li>项目类型： <ul><li>CSR/SSR</li><li>主应用/微应用/微模块</li><li>PC 端/移动端</li></ul></li><li>TypeScript</li><li>UI 库： <ul><li>React/Vue</li><li>指定版本</li></ul></li><li>打包器： <ul><li>webpack/Vite</li><li>打包优化</li></ul></li><li>CSS 方案 <ul><li>预处理器</li><li>Tailwind</li><li>CSS-in-JS</li></ul></li><li>路由库</li><li>网络请求库</li><li>状态管理库</li><li>语法检查 <ul><li>eslint</li><li>stylelint</li><li>commitlint</li><li>husky hook</li></ul></li><li>Git 仓库 <ul><li>.gitignore</li></ul></li></ul><h2 id="脚手架运行流程" tabindex="-1">脚手架运行流程 <a class="header-anchor" href="#脚手架运行流程" aria-label="Permalink to &quot;脚手架运行流程&quot;">​</a></h2><ol><li>创建 npm 项目</li><li>复制初始文件 <ul><li>webpack.config.js</li><li>eslint</li><li>stylelint</li><li>prettier</li><li>.husky</li><li>.gitignore</li><li>src/index.ts</li><li>src/pages</li><li>src/components</li></ul></li><li>安装依赖</li><li>初始化 Git 仓库 (可选)</li></ol>',15),o=[r];function u(n,c,s,p,d,_){return e(),i("div",null,o)}const m=l(a,[["render",u]]);export{f as __pageData,m as default};
