import{_ as t,c as d,o as e,d as o}from"./app.b2b4ff33.js";const f=JSON.parse('{"title":"正则表达式","description":"","frontmatter":{},"headers":[{"level":2,"title":"字符类","slug":"字符类","link":"#字符类","children":[]}],"relativePath":"fe/basic/regexp/regexp.md","lastUpdated":1680593177000}'),c={name:"fe/basic/regexp/regexp.md"},r=o('<h1 id="正则表达式" tabindex="-1">正则表达式 <a class="header-anchor" href="#正则表达式" aria-hidden="true">#</a></h1><p>正则表达式 (Regular Expression) 由 2 部分组成：</p><ul><li>模式 (pattern)</li><li>修饰符 (flag)</li></ul><table><thead><tr><th>修饰符</th><th>含义</th></tr></thead><tbody><tr><td><code>i</code></td><td>不区分大小写</td></tr><tr><td><code>g</code></td><td>搜索所有匹配项</td></tr><tr><td><code>m</code></td><td>多行模式</td></tr><tr><td><code>s</code></td><td>允许 <code>.</code> 匹配 <code>\\n</code></td></tr><tr><td><code>u</code></td><td>完整 Unicode 支持</td></tr><tr><td><code>y</code></td><td>在指定位置搜索</td></tr></tbody></table><p>创建正则表达式：</p><ul><li><code>new RegExp(&#39;pattern&#39;, &#39;flags&#39;)</code><ul><li>支持动态</li></ul></li><li><code>/pattern/flags</code><ul><li>静态</li></ul></li></ul><h2 id="字符类" tabindex="-1">字符类 <a class="header-anchor" href="#字符类" aria-hidden="true">#</a></h2><table><thead><tr><th>字符类</th><th>含义</th></tr></thead><tbody><tr><td><code>\\d</code> (digit)</td><td>数字</td></tr><tr><td><code>\\s</code> (space)</td><td>空白符：空格、<code>\\t</code>、<code>\\n</code>、<code>\\v</code>、<code>\\f</code>、<code>\\r</code> 等</td></tr><tr><td><code>\\w</code> (word)</td><td>“单字”：字母、数字、下划线 <code>_</code></td></tr><tr><td><code>\\D</code></td><td><code>\\d</code> 反向类，非数字</td></tr><tr><td><code>\\S</code></td><td><code>\\S</code> 反向类，非空白符</td></tr><tr><td><code>\\W</code></td><td><code>\\w</code> 反向类，非字母、数字、下划线</td></tr><tr><td><code>.</code></td><td>除 <code>\\n</code> 外任何字符</td></tr></tbody></table>',8),a=[r];function l(i,s,n,h,_,p){return e(),d("div",null,a)}const g=t(c,[["render",l]]);export{f as __pageData,g as default};
