import{_ as e,c as a,o as s,U as l}from"./chunks/framework.e548c890.js";const o="/assets/url-prop.45314c59.png",U=JSON.parse('{"title":"URL 对象","description":"","frontmatter":{},"headers":[],"relativePath":"fe/lang/js/url.md","filePath":"fe/lang/js/url.md","lastUpdated":1702822707000}'),c={name:"fe/lang/js/url.md"},r=l('<h1 id="url-对象" tabindex="-1">URL 对象 <a class="header-anchor" href="#url-对象" aria-label="Permalink to &quot;URL 对象&quot;">​</a></h1><p>尽管可以使用字符串作为 URL，但 URL 对象提供了一些便捷的属性和方法，而且大部分接收 URL 的方法也接收 URL 对象。</p><p>创建：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">URL</span><span style="color:#A6ACCD;">(url</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [base])</span><span style="color:#89DDFF;">;</span></span></code></pre></div><ul><li><code>url</code>：URL 或路径 (如果设置了 <code>base</code>)</li><li><code>base</code>：base URL</li></ul><p>属性：</p><p><img src="'+o+'" alt=""></p><h2 id="urlsearchparams" tabindex="-1">URLSearchParams <a class="header-anchor" href="#urlsearchparams" aria-label="Permalink to &quot;URLSearchParams&quot;">​</a></h2><p><code>url.searchParams</code> 是 <code>URLSearchParams</code> 类型的对象。</p><p>方法：</p><ul><li><code>append(name, value)</code></li><li><code>delete(name)</code></li><li><code>get(name)</code></li><li><code>getAll(name)</code></li><li><code>has(name)</code></li><li><code>set(name, value)</code></li><li><code>sort()</code></li><li>可迭代</li></ul>',11),t=[r];function n(p,d,i,u,_,m){return s(),a("div",null,t)}const R=e(c,[["render",n]]);export{U as __pageData,R as default};
