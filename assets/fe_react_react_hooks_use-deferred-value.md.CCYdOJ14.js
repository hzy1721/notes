import{_ as e,c as t,o as a,a1 as l}from"./chunks/framework.mNpZ2GHZ.js";const _=JSON.parse('{"title":"useDeferredValue","description":"","frontmatter":{},"headers":[],"relativePath":"fe/react/react/hooks/use-deferred-value.md","filePath":"fe/react/react/hooks/use-deferred-value.md","lastUpdated":1702822707000}'),d={name:"fe/react/react/hooks/use-deferred-value.md"},s=l('<h1 id="usedeferredvalue" tabindex="-1">useDeferredValue <a class="header-anchor" href="#usedeferredvalue" aria-label="Permalink to &quot;useDeferredValue&quot;">​</a></h1><p>推迟更新部分 UI。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> deferredValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useDeferredValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value);</span></span></code></pre></div><p>参数：</p><ul><li><code>value</code>：想要推迟更新的值</li></ul><p>返回值：</p><ul><li><code>deferredValue</code>： <ul><li>第一次渲染：与 <code>value</code> 相同</li><li>后续渲染：先返回旧值渲染一次，如果值有变化，则在后台返回新值渲染一次</li></ul></li></ul><p>后台渲染：</p><ul><li>首先尝试渲染，如果阻塞了就放弃这次渲染，直到数据准备好之后再渲染</li><li>后台渲染是可中断的，如果渲染过程中值又发生变化，则从头开始渲染 (类似于防抖)</li><li>后台渲染不会触发 <code>&lt;Suspense&gt;</code>，如果渲染阻塞了 UI，将会显示旧值的渲染结果</li></ul><p>警告：</p><ul><li>不要传入每次渲染都不相同的值，会导致不必要的后台渲染，比如组件内的对象、函数</li><li>使用 <code>deferredValue</code> 的组件必须用 <code>memo</code> 缓存，否则返回旧值也会导致组件渲染</li></ul><p>用途：</p><ul><li>在新 UI 渲染好之前显示旧 UI <ul><li>可以通过比较 <code>value</code> 和 <code>deferredValue</code> 是否相同来判断是新 UI 还是旧 UI</li></ul></li><li>昂贵组件的性能优化，降低渲染频率</li></ul><p>与防抖节流的区别：</p><table tabindex="0"><thead><tr><th>useDeferredValue</th><th>防抖节流</th></tr></thead><tbody><tr><td>更适合优化 React 组件渲染</td><td>通用的降低执行频率的方法</td></tr><tr><td>没有固定的时间间隔，不同设备的表现不同</td><td>有指定的时间间隔阈值</td></tr><tr><td>提供了后台渲染的能力，不会阻塞 UI</td><td>只是推迟更新或降低更新频率，每次更新仍可能造成卡顿</td></tr></tbody></table>',15),i=[s];function r(o,u,c,p,n,h){return a(),t("div",null,i)}const k=e(d,[["render",r]]);export{_ as __pageData,k as default};
