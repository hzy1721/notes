import{_ as s,c as a,o as i,a1 as e}from"./chunks/framework.mNpZ2GHZ.js";const t="/assets/readable_stream.CzDbY37s.png",_=JSON.parse('{"title":"ReadableStream","description":"","frontmatter":{},"headers":[],"relativePath":"fe/browser/network/readable-stream.md","filePath":"fe/browser/network/readable-stream.md","lastUpdated":1720354129000}'),n={name:"fe/browser/network/readable-stream.md"},l=e('<h1 id="readablestream" tabindex="-1">ReadableStream <a class="header-anchor" href="#readablestream" aria-label="Permalink to &quot;ReadableStream&quot;">​</a></h1><p>ReadableStream 用于流式数据传输，每个流（stream）分为若干个不同大小、类型的数据块（chunk），通过浏览器内部的队列依次传输，最终被 reader 读取和消费。</p><p>每个流同时只能有一个 reader 读取，与之相配套的还有一个 controller，负责流的启动、暂停、关闭等管理操作。reader 和其他处理数据的代码统称为消费者（consumer）。</p><p><img src="'+t+`" alt=""></p><p>流式传输的数据源可以分为推流（push）和拉流（pull）：</p><ul><li>推流：视频直播、Websocket</li><li>拉流：fetch</li></ul><p>ReadableStream 是异步可迭代的（async iterable），可以通过 <code>for await...of</code> 访问，<code>Response.body</code> 就是一个 ReadableStream。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> chunk</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.body) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 处理每个 chunk</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,8),r=[l];function p(h,k,d,o,c,g){return i(),a("div",null,r)}const m=s(n,[["render",p]]);export{_ as __pageData,m as default};
