import{_ as e,c as a,o as r,d as s}from"./app.54004db6.js";const o="/assets/array-buffer.182b6298.png",A=JSON.parse('{"title":"ArrayBuffer","description":"","frontmatter":{},"headers":[],"relativePath":"fe/basic/js/binary/array-buffer.md","lastUpdated":1680593177000}'),t={name:"fe/basic/js/binary/array-buffer.md"},c=s(`<h1 id="arraybuffer" tabindex="-1">ArrayBuffer <a class="header-anchor" href="#arraybuffer" aria-hidden="true">#</a></h1><p><code>ArrayBuffer</code> 是一种二进制对象，引用固定长度的连续内存空间。</p><p>创建 <code>ArrayBuffer</code>：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// byteLength 字节，用 0 填充</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ArrayBuffer</span><span style="color:#A6ACCD;">(byteLength)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p><code>ArrayBuffer</code> 无法直接访问，需要通过视图对象进行操作。</p><p>有 2 类视图对象：</p><ul><li><code>TypedArray</code>：将字节解释为不同类型的数组，包含若干类型 <ul><li>不存在 <code>TypedArray</code> 构造函数，只是一个概念上的统称</li></ul></li><li><code>DataView</code>： <ul><li><code>TypedArray</code> 只能将整个 <code>ArrayBuffer</code> 解释为一种类型</li><li><code>DataView</code> 支持将 <code>ArrayBuffer</code> 的不同部分解释为不同的类型</li></ul></li></ul><p><img src="`+o+'" alt=""></p>',8),n=[c];function l(p,d,i,f,y,u){return r(),a("div",null,n)}const b=e(t,[["render",l]]);export{A as __pageData,b as default};
