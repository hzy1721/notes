import{_ as s,c as e,o as a,d as t}from"./app.32a4a0ab.js";const C=JSON.parse('{"title":"createContext","description":"","frontmatter":{},"headers":[{"level":2,"title":"Context.Provider","slug":"context-provider","link":"#context-provider","children":[]},{"level":2,"title":"用途","slug":"用途","link":"#用途","children":[]}],"relativePath":"fe/react-stack/react/functions/create-context.md","lastUpdated":1684034003000}'),n={name:"fe/react-stack/react/functions/create-context.md"},o=t(`<h1 id="createcontext" tabindex="-1">createContext <a class="header-anchor" href="#createcontext" aria-hidden="true">#</a></h1><p>context 用于向相隔一层以上的后代组件传递数据。</p><p>创建 context：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createContext</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> SomeContext </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createContext</span><span style="color:#A6ACCD;">(initialValue)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="context-provider" tabindex="-1">Context.Provider <a class="header-anchor" href="#context-provider" aria-hidden="true">#</a></h2><p>用 Provider 包裹需要接收数据的后代组件：</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">SomeContext.Provider</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">value</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">}&gt;{</span><span style="color:#676E95;font-style:italic;">/* 后代组件 */</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#FFCB6B;">SomeContext.Provider</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="用途" tabindex="-1">用途 <a class="header-anchor" href="#用途" aria-hidden="true">#</a></h2><ol><li>主题切换，暗黑模式</li><li>当前登录的用户信息</li><li>当前路由信息，路由库会用到</li><li>代替 prop 透传进行祖先节点到后代节点的数据传递</li></ol>`,9),l=[o];function p(c,r,i,d,D,y){return a(),e("div",null,l)}const h=s(n,[["render",p]]);export{C as __pageData,h as default};
