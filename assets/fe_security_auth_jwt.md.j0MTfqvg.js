import{_ as a,c as i,o as s,a1 as e}from"./chunks/framework.mNpZ2GHZ.js";const t="/assets/jwt.DgE37U8v.jpeg",g=JSON.parse('{"title":"JWT","description":"","frontmatter":{},"headers":[],"relativePath":"fe/security/auth/jwt.md","filePath":"fe/security/auth/jwt.md","lastUpdated":1683886409000}'),l={name:"fe/security/auth/jwt.md"},n=e('<h1 id="jwt" tabindex="-1">JWT <a class="header-anchor" href="#jwt" aria-label="Permalink to &quot;JWT&quot;">​</a></h1><p>JWT (JSON Web Tokens) 是目前最流行的跨域认证解决方案。</p><p>JWT 有三个部分：</p><ul><li>Header</li><li>Payload</li><li>Signature</li></ul><p>写成一行，用点 <code>.</code> 分隔：<code>Header.Payload.Signature</code></p><p><img src="'+t+`" alt=""></p><h2 id="header" tabindex="-1">Header <a class="header-anchor" href="#header" aria-label="Permalink to &quot;Header&quot;">​</a></h2><p>Header 是一个 JSON 对象，描述 JWT 的元数据。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;alg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;HS256&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;typ&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;JWT&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>alg</code>：签名算法 (algorithm)，默认是 HMAC SHA256 (<code>HS256</code>)</li><li><code>typ</code>：token 类型 (type)，统一写为 <code>JWT</code></li></ul><p>最后使用 Base64 URL 算法转换为字符串。</p><h2 id="payload" tabindex="-1">Payload <a class="header-anchor" href="#payload" aria-label="Permalink to &quot;Payload&quot;">​</a></h2><p>Payload 也是一个 JSON 对象，用来存放实际需要传送的数据。</p><p>JWT 规定了 7 个官方字段：</p><ul><li><code>iss</code> (issuer)：签发人</li><li><code>exp</code> (expiration time)：过期时间</li><li><code>sub</code> (subject)：主题</li><li><code>aud</code> (audience)：受众</li><li><code>nbf</code> (Not Before)：生效时间</li><li><code>iat</code> (Issued At)：签发时间</li><li><code>jti</code> (JWT ID)：编号</li></ul><p>也可以定义私有字段。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;sub&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1234567890&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;John Doe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>JWT 默认不加密，不能放私密信息。</p><p>最后使用 Base64 URL 算法转换为字符串。</p><h2 id="signature" tabindex="-1">Signature <a class="header-anchor" href="#signature" aria-label="Permalink to &quot;Signature&quot;">​</a></h2><p>Signature 是对 Header 和 Payload 的签名，防止数据被篡改。</p><p>首先指定一个<strong>只有服务端知道</strong>的密钥 (<code>secret</code>)，然后使用 Header 指定的签名算法 <code>alg</code> 生成 Signature。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HMACSHA256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">base64UrlEncode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(header) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;.&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> base64UrlEncode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(payload), secret);</span></span></code></pre></div><h2 id="base64-url-算法" tabindex="-1">Base64 URL 算法 <a class="header-anchor" href="#base64-url-算法" aria-label="Permalink to &quot;Base64 URL 算法&quot;">​</a></h2><p>Base64 URL 算法基于 Base64 算法做了一些修改：</p><ul><li><code>/</code> 替换为 <code>_</code></li><li><code>+</code> 替换为 <code>-</code></li><li><code>=</code> 省略</li></ul><p>因为 token 有可能作为 query param。</p><h2 id="使用方式" tabindex="-1">使用方式 <a class="header-anchor" href="#使用方式" aria-label="Permalink to &quot;使用方式&quot;">​</a></h2><ul><li>客户端收到的 JWT 可以放在 Cookie 里自动发送，但不能跨域</li><li>更好的办法是放在请求头的 <code>Authorization</code> 里</li><li>也可以放在 POST 请求的请求体里。</li></ul><h2 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h2><ul><li>默认不加密，服务端也可以自己做加密</li><li>不仅可以用于认证，也可以用于交换信息</li><li>服务端无状态，无法在到期时间前收回 token 或修改 token 权限</li><li>本身包含了认证信息，泄漏后问题比较严重，因此有效期应该设置得比较短</li><li>JWT 应该使用 HTTPS 传输，而不是 HTTP</li></ul>`,31),o=[n];function h(p,d,r,c,k,u){return s(),i("div",null,o)}const y=a(l,[["render",h]]);export{g as __pageData,y as default};
