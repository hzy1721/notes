import{_ as l,c as i,o as e,U as a}from"./chunks/framework.e548c890.js";const t="/assets/design-pattern.07335292.png",b=JSON.parse('{"title":"设计模式","description":"","frontmatter":{},"headers":[],"relativePath":"basic/design-pattern/overview.md","filePath":"basic/design-pattern/overview.md","lastUpdated":1680318810000}'),r={name:"basic/design-pattern/overview.md"},o=a('<h1 id="设计模式" tabindex="-1">设计模式 <a class="header-anchor" href="#设计模式" aria-label="Permalink to &quot;设计模式&quot;">​</a></h1><p>共 23 种设计模式。</p><p>分为三类：</p><ul><li>创建型：创建一个对象 <ul><li>单例模式 (Singleton)</li><li>原型模式 (Prototype)</li></ul></li><li>结构型：将对象组合成更大的结构 <ul><li>代理模式 (Proxy)</li></ul></li><li>行为型：对象之间的通信和职责分工 <ul><li>观察者模式 (Observer)</li><li>迭代器模式 (Iterator)</li></ul></li></ul><p><img src="'+t+'" alt=""></p><h2 id="浏览器中的设计模式" tabindex="-1">浏览器中的设计模式 <a class="header-anchor" href="#浏览器中的设计模式" aria-label="Permalink to &quot;浏览器中的设计模式&quot;">​</a></h2><ul><li>单例模式 <ul><li>缓存、全局状态管理</li></ul></li><li>观察者模式 <ul><li>响应式数据</li></ul></li></ul><h2 id="js-中的设计模式" tabindex="-1">JS 中的设计模式 <a class="header-anchor" href="#js-中的设计模式" aria-label="Permalink to &quot;JS 中的设计模式&quot;">​</a></h2><ul><li>原型模式 <ul><li>JS 创建对象的基本模式</li></ul></li><li>代理模式 <ul><li>ES6 引入的 Proxy 类型、前端监控、网络代理</li></ul></li><li>迭代器模式 <ul><li>ES6 引入的可迭代对象</li></ul></li></ul><h2 id="创建型" tabindex="-1">创建型 <a class="header-anchor" href="#创建型" aria-label="Permalink to &quot;创建型&quot;">​</a></h2><ul><li>Factory Method <ul><li>工厂方法</li></ul></li><li>Abstract Factory <ul><li>抽象工厂</li></ul></li><li>Builder</li><li>Prototype <ul><li>原型</li></ul></li><li>Singleton <ul><li>单例</li></ul></li></ul><h2 id="结构型" tabindex="-1">结构型 <a class="header-anchor" href="#结构型" aria-label="Permalink to &quot;结构型&quot;">​</a></h2><ul><li>Adapter <ul><li>适配器</li></ul></li><li>Bridge</li><li>Composite <ul><li>组合</li></ul></li><li>Decorator <ul><li>装饰器</li></ul></li><li>Facade</li><li>Flyweight</li><li>Proxy <ul><li>代理</li></ul></li></ul><h2 id="行为型" tabindex="-1">行为型 <a class="header-anchor" href="#行为型" aria-label="Permalink to &quot;行为型&quot;">​</a></h2><ul><li>Chain of Responsibility <ul><li>责任链</li></ul></li><li>Command <ul><li>命令</li></ul></li><li>Iterator <ul><li>迭代器</li></ul></li><li>Mediator</li><li>Memento</li><li>Observer <ul><li>观察者</li></ul></li><li>State</li><li>Strategy <ul><li>策略</li></ul></li><li>Template Method <ul><li>模板方法</li></ul></li><li>Visitor</li></ul>',15),u=[o];function s(n,d,c,h,p,_){return e(),i("div",null,u)}const f=l(r,[["render",s]]);export{b as __pageData,f as default};
