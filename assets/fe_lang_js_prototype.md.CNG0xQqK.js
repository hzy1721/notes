import{_ as s,c as i,o as a,a1 as t}from"./chunks/framework.mNpZ2GHZ.js";const e="/assets/Rabbit.clZWvdDW.png",n="/assets/Object.prototype.SmLHsaFD.png",b=JSON.parse('{"title":"原型","description":"","frontmatter":{},"headers":[],"relativePath":"fe/lang/js/prototype.md","filePath":"fe/lang/js/prototype.md","lastUpdated":1702822707000}'),p={name:"fe/lang/js/prototype.md"},h=t(`<h1 id="原型" tabindex="-1">原型 <a class="header-anchor" href="#原型" aria-label="Permalink to &quot;原型&quot;">​</a></h1><p>JS 通过原型 (prototype) 支持 OOP 中的继承。</p><h2 id="什么是原型" tabindex="-1">什么是原型 <a class="header-anchor" href="#什么是原型" aria-label="Permalink to &quot;什么是原型&quot;">​</a></h2><p>每个对象有一个隐藏属性 <code>[[Prototype]]</code>，称为该对象的<strong>原型</strong>。</p><p>隐藏属性指的是 JS 引擎内部维护该属性，用户代码无法<strong>直接</strong>访问。</p><p>原型的值要么为 <code>null</code>，要么为另一个对象。</p><p>同样，原型对象也可以有原型，这样就构成了一条<strong>原型链</strong> (prototype chain)。</p><p>访问属性时首先查找对象的自有属性，然后查找原型属性。</p><p>原型链上的所有属性都会被对象所<strong>继承</strong>。</p><p>设置属性只针对对象本身，不会修改原型链。</p><p>有 2 种方法读写对象的原型：</p><ul><li><code>Object.getPrototypeOf/Object.setPrototypeOf</code> 方法</li><li><code>__proto__</code> 属性 <ul><li><code>[[Prototype]]</code> 的 getter/setter</li></ul></li></ul><h2 id="构造函数原型" tabindex="-1">构造函数原型 <a class="header-anchor" href="#构造函数原型" aria-label="Permalink to &quot;构造函数原型&quot;">​</a></h2><p>除了手动设置对象的原型实现继承之外，更多的是让一个类型继承另一个类型，从而使子类型的所有对象都能继承父类型的属性。</p><p>JS 中用构造函数定义一个类型 (假设是 <code>F</code>)，使用 <code>new F(args)</code> 创建该类型的对象。</p><p>构造函数 <code>F</code> 可以设置一个属性 <code>prototype</code>，使用 <code>new</code> 操作符创建对象时，如果 <code>F.prototype</code> 是一个对象，则会把这个对象设置为新创建对象的原型 <code>[[Prototype]]</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 原型对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> animal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  eats: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 构造函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Rabbit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Rabbit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animal;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 实例对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rabbit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Rabbit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;White Rabbit&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// rabbit.__proto__ === animal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rabbit.eats); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span></code></pre></div><h2 id="函数默认原型" tabindex="-1">函数默认原型 <a class="header-anchor" href="#函数默认原型" aria-label="Permalink to &quot;函数默认原型&quot;">​</a></h2><p>每个函数默认存在 <code>prototype</code> 属性，是只有一个属性 <code>constructor</code> 的对象，值为函数本身。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Rabbit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Rabbit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// { constructor: Rabbit }</span></span></code></pre></div><p><img src="`+e+`" alt=""></p><p><code>constructor</code> 的值可以被所有 <code>Rabbit</code> 创建出的对象访问，因此可以使用与一个对象相同的构造函数创建另一个对象。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rabbit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Rabbit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;White Rabbit&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rabbit2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rabbit.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Black Rabbit&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>为了不覆盖 <code>constructor</code> 这一有用的属性，修改函数的 <code>prototype</code> 时尽量不要完全替换，而是往上面添加属性，或者完全替换后再手动加上 <code>constructor</code>。</p><h2 id="object-prototype" tabindex="-1">Object.prototype <a class="header-anchor" href="#object-prototype" aria-label="Permalink to &quot;Object.prototype&quot;">​</a></h2><p>原型通常用于提供该类型的一些实用函数，比如 <code>toString</code>、<code>forEach</code> 等。使一个该类型的空对象 (没有自有属性) 可以直接调用这些实用函数。</p><p>JS 中绝大部分对象都直接或间接继承自 <code>Object.prototype</code>，该原型提供了大量适用于对象的实用函数。</p><p>其他内建类型，比如 <code>Array</code>、<code>Date</code>、<code>Function</code> 等，也提供了自己的原型方法，而这些原型对象 (<code>Array.prototype</code> 等) 的原型为 <code>Object.prototype</code>。</p><p><img src="`+n+`" alt=""></p><h2 id="object-create" tabindex="-1">Object.create <a class="header-anchor" href="#object-create" aria-label="Permalink to &quot;Object.create&quot;">​</a></h2><p>创建对象时指定原型的方法有 2 种：</p><ul><li><code>Object.create(proto)</code></li><li>字面量中包括 <code>__proto__</code></li></ul><p><code>Object.create(proto, propertiesObject)</code> 也可以用于拷贝一个对象 (浅拷贝)，包括自有属性和继承属性 (原型)，而自有属性可以使用 <code>getOwnPropertyDescriptors</code> 涵盖可枚举和不可枚举的数据属性和访问器属性，实现完全拷贝。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> clone</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPrototypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOwnPropertyDescriptors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>`,34),l=[h];function k(o,r,d,c,E,g){return a(),i("div",null,l)}const F=s(p,[["render",k]]);export{b as __pageData,F as default};
