import{_ as l,c as e,o as i,d as t}from"./app.13072fed.js";const m=JSON.parse('{"title":"生命周期","description":"","frontmatter":{},"headers":[],"relativePath":"fe/framework/vue/lifecycle.md","lastUpdated":1680318810000}'),o={name:"fe/framework/vue/lifecycle.md"},c=t('<h1 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-hidden="true">#</a></h1><ol><li>setup <ul><li>在所有选项式 API 钩子之前调用</li></ul></li><li>beforeCreate <ul><li>组件实例初始化完成</li><li>props 解析完成</li><li>还未设置状态 (<code>data</code>、<code>computed</code> 等)</li></ul></li><li>created <ul><li>处理完所有状态，包括： <ul><li>响应式数据 <code>data</code></li><li>计算属性 <code>computed</code></li><li>方法 <code>methods</code></li><li>侦听器 <code>watch/watchEffect</code></li></ul></li></ul></li><li>beforeMount <ul><li>完成了响应式状态的设置</li><li>还没有创建真实 DOM 节点</li></ul></li><li>mounted <ul><li>所有同步子组件挂载完成 (不包含异步组件和 <code>&lt;Suspense&gt;</code> 内的组件)</li><li>真实 DOM 创建完成并插入到父容器</li><li>常用于执行需要访问 DOM 的操作</li></ul></li><li>beforeUpdate <ul><li>由于响应式状态变更而导致 DOM 树更新之前</li></ul></li><li>updated <ul><li>由于响应式状态变更而导致 DOM 树更新之后</li><li>在任意 DOM 更新后调用，无法确定是哪些状态导致的更新</li><li>如果需要在指定状态更新 DOM 后做一些操作，使用 <code>nextTick()</code></li><li>不要在 <code>updated</code> 中改变组件状态，可能会导致无限循环</li></ul></li><li>beforeUnmount <ul><li>组件实例卸载前</li><li>组件还保有全部的功能</li></ul></li><li>unmounted <ul><li>组件实例卸载后</li><li>所有子组件被卸载</li><li>所有响应式作用已停止</li><li>用于手动清理一些副作用，比如计时器、DOM 事件监听器、与服务器的连接等</li></ul></li></ol><p><img src="https://s2.loli.net/2022/08/04/kg3fJrG4cwE7x6K.png" alt="图片"></p>',3),d=[c];function a(u,r,s,n,_,p){return i(),e("div",null,d)}const h=l(o,[["render",a]]);export{m as __pageData,h as default};
