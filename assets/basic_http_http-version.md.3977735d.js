import{_ as s,c as l,o as a,U as n}from"./chunks/framework.e548c890.js";const u=JSON.parse('{"title":"HTTP 版本","description":"","frontmatter":{},"headers":[],"relativePath":"basic/http/http-version.md","filePath":"basic/http/http-version.md","lastUpdated":1697294017000}'),o={name:"basic/http/http-version.md"},e=n(`<h1 id="http-版本" tabindex="-1">HTTP 版本 <a class="header-anchor" href="#http-版本" aria-label="Permalink to &quot;HTTP 版本&quot;">​</a></h1><h2 id="http-0-9-1991" tabindex="-1">HTTP/0.9 (1991) <a class="header-anchor" href="#http-0-9-1991" aria-label="Permalink to &quot;HTTP/0.9 (1991)&quot;">​</a></h2><blockquote><p>单行协议</p></blockquote><p>请求报文只有一行，包括 <code>GET</code> 方法和请求路径 (path)。</p><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">GET</span><span style="color:#A6ACCD;"> /mypage.html</span></span></code></pre></div><p>响应报文只有 HTML 文本。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  A very simple HTML page</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="http-1-0-1996" tabindex="-1">HTTP/1.0 (1996) <a class="header-anchor" href="#http-1-0-1996" aria-label="Permalink to &quot;HTTP/1.0 (1996)&quot;">​</a></h2><blockquote><p>扩展功能</p></blockquote><ul><li>请求方法新增 <code>POST</code>、<code>HEAD</code></li><li>请求报文首行末尾新增 HTTP 版本</li><li>新增请求头和响应头，用于描述元数据</li><li>响应报文首行新增状态码 (status code) 和状态文本 (status text)</li><li>响应体支持更多数据类型，称为 MIME 类型</li><li>支持 Authorization</li><li>支持启发式缓存 <ul><li>响应头没有 Cache-Control 或 Expires，但是有 Last-Modified</li><li>默认的缓存策略：<code>(当前时间 - Last-Modified) * 0.1</code></li></ul></li></ul><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">GET</span><span style="color:#A6ACCD;"> /myimage.gif </span><span style="color:#F78C6C;">HTTP</span><span style="color:#A6ACCD;">/</span><span style="color:#F78C6C;">1.0</span></span>
<span class="line"><span style="color:#F07178;">User-Agent</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">NCSA_Mosaic/2.0 (Windows 3.1)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">200 OK</span></span>
<span class="line"><span style="color:#F07178;">Date</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Tue, 15 Nov 1994 08:12:32 GMT</span></span>
<span class="line"><span style="color:#F07178;">Server</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">CERN/3.0 libwww/2.17</span></span>
<span class="line"><span style="color:#F07178;">Content-Type</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">text/gif</span></span>
<span class="line"><span style="color:#A6ACCD;">(image content)</span></span></code></pre></div><ul><li>缺点： <ul><li>一个 TCP 连接只发送一个请求，性能较差</li><li>不同浏览器和服务端的实现缺乏标准，互操作性较差 (先有实现、后有标准)</li></ul></li><li>部分浏览器请求时使用<strong>非标准</strong>的 <code>Connection: keep-alive</code>，要求服务端不要关闭 TCP 连接，如果服务端也回应 <code>Connection: keep-alive</code>，就建立了一个可复用的 TCP 连接</li></ul><h2 id="http-1-1-1997-1999-2014" tabindex="-1">HTTP/1.1 (1997/1999/2014) <a class="header-anchor" href="#http-1-1-1997-1999-2014" aria-label="Permalink to &quot;HTTP/1.1 (1997/1999/2014)&quot;">​</a></h2><blockquote><p>标准化 + 扩展功能</p></blockquote><ul><li>第一个标准化的 HTTP 版本，先有标准、后有实现</li><li>请求方法新增 <code>PUT</code>、<code>PATCH</code>、<code>OPTIONS</code>、<code>DELETE</code></li><li>请求头新增 <code>Host</code> 表示服务端域名，一个 IP 可以部署多个域名</li><li>连接复用 <ul><li>TCP 连接默认不关闭，可以被多个请求复用</li><li>客户端和服务端发现对方有一段时间没有活动，可以主动关闭连接</li><li>客户端发送最后一个请求时最好带上 <code>Connection: close</code>，告知服务端关闭连接</li><li>同一个域名，大多数浏览器允许同时建立 <strong>6</strong> 个 TCP 连接</li></ul></li><li>流水线 (pipelining) <ul><li>一个 TCP 连接可以同时发送多个请求和多个回应</li><li>为了区分相邻的响应报文，使用 <code>Content-Length</code> 指定数据长度，以字节为单位</li></ul></li><li>响应分块 <ul><li>对于耗时操作，最好实时发送生成的数据，而不是全部生成再统一发送</li><li>响应头 <code>Transfer-Encoding: chunked</code> 表示分块传输，每个数据块前有一个十六进制数，表示当前数据块的长度，最后是一个长度为 0 的块</li></ul></li><li>缓存机制完善：<code>Cache-Control</code></li><li>内容协商：支持语言、编码、类型的协商</li></ul><table><thead><tr><th>内容协商</th><th>请求头</th><th>响应头</th></tr></thead><tbody><tr><td>MIME 类型</td><td><code>Accept</code></td><td><code>Content-Type</code></td></tr><tr><td>编码格式</td><td><code>Accept-Encoding</code></td><td><code>Content-Encoding</code></td></tr><tr><td>语言</td><td><code>Accept-Lanugage</code></td><td><code>Content-Language</code></td></tr></tbody></table><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">GET</span><span style="color:#A6ACCD;"> /en-US/docs/Glossary/Simple_header </span><span style="color:#F78C6C;">HTTP</span><span style="color:#A6ACCD;">/</span><span style="color:#F78C6C;">1.1</span></span>
<span class="line"><span style="color:#F07178;">Host</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">developer.mozilla.org</span></span>
<span class="line"><span style="color:#F07178;">User-Agent</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:50.0) Gecko/20100101 Firefox/50.0</span></span>
<span class="line"><span style="color:#F07178;">Accept</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span></span>
<span class="line"><span style="color:#F07178;">Accept-Language</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">en-US,en;q=0.5</span></span>
<span class="line"><span style="color:#F07178;">Accept-Encoding</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gzip, deflate, br</span></span>
<span class="line"><span style="color:#F07178;">Referer</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://developer.mozilla.org/en-US/docs/Glossary/Simple_header</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">200 OK</span></span>
<span class="line"><span style="color:#F07178;">Connection</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Keep-Alive</span></span>
<span class="line"><span style="color:#F07178;">Content-Encoding</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gzip</span></span>
<span class="line"><span style="color:#F07178;">Content-Type</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">text/html; charset=utf-8</span></span>
<span class="line"><span style="color:#F07178;">Date</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Wed, 20 Jul 2016 10:55:30 GMT</span></span>
<span class="line"><span style="color:#F07178;">Etag</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;547fa7e369ef56031dd3bff2ace9fc0832eb251a&quot;</span></span>
<span class="line"><span style="color:#F07178;">Keep-Alive</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">timeout=5, max=1000</span></span>
<span class="line"><span style="color:#F07178;">Last-Modified</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Tue, 19 Jul 2016 00:59:33 GMT</span></span>
<span class="line"><span style="color:#F07178;">Server</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Apache</span></span>
<span class="line"><span style="color:#F07178;">Transfer-Encoding</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">chunked</span></span>
<span class="line"><span style="color:#F07178;">Vary</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Cookie, Accept-Encoding</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">(content)</span></span></code></pre></div><ul><li>缺点：服务器按顺序处理请求和发回响应，如果前面的请求耗时过长，就会造成后面的请求排队，称为<strong>队头阻塞</strong> (head-of-line blocking)</li></ul><h2 id="http-2-2015" tabindex="-1">HTTP/2 (2015) <a class="header-anchor" href="#http-2-2015" aria-label="Permalink to &quot;HTTP/2 (2015)&quot;">​</a></h2><blockquote><p>优化性能</p></blockquote><p>基于 Google 的 SPDY 协议 (解决 HTTP/1.1 效率不高的问题)。</p><ol><li><strong>二进制协议 (binary protocol)</strong></li></ol><ul><li>报文采用二进制编码，而不是文本格式，便于性能优化</li><li>每个报文对应一个数据流 (stream)，有一个唯一 ID，附加在每个帧中</li><li>数据流分为多个帧 (frame) 发送，比如头信息帧、数据帧 <ul><li>客户端发出的数据流 ID 为奇数，服务端发出的数据流 ID 为偶数</li><li>发送 <code>RST_STREAM</code> 帧来取消数据流</li><li>客户端可以指定数据流的优先级，优先级高服务端优先回应</li></ul></li><li>支持自定义帧，用于高级应用</li></ul><ol start="2"><li><strong>头信息压缩 (header compression)</strong></li></ol><ul><li>HTTP 的无状态导致每次请求都需要带上大部分重复的 header，造成浪费</li><li>header 使用 gzip 或 compress 压缩后再发送</li><li>客户端和服务端维护一张头信息表，所有字段存入该表并生成索引号，后续只发送索引号</li></ul><ol start="3"><li><strong>多路复用 (multiplexed)</strong></li></ol><ul><li>一个 TCP 连接上，客户端和服务端可以同时发送多个请求和响应，响应顺序不必对应请求顺序，避免了队头阻塞</li></ul><ol start="4"><li><strong>服务端推送 (server push)</strong></li></ol><ul><li>允许服务端主动向客户端发送资源，填充客户端缓存，比如 HTML 关联的静态资源</li></ul><h2 id="http-3-2022" tabindex="-1">HTTP/3 (2022) <a class="header-anchor" href="#http-3-2022" aria-label="Permalink to &quot;HTTP/3 (2022)&quot;">​</a></h2><blockquote><p>TCP -&gt; QUIC</p></blockquote><ul><li>传输层用 QUIC 代替 TCP，实现更低的时延</li><li>TCP 的可靠传输和超时重传可能阻塞所有 HTTP/2 数据流</li><li>QUIC 底层采用 UDP，对每个数据流单独实现超时重传机制，不会阻塞其他数据流</li></ul>`,32),t=[e];function p(c,i,r,C,d,y){return a(),l("div",null,t)}const A=s(o,[["render",p]]);export{u as __pageData,A as default};
