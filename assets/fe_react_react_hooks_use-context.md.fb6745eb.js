import{_ as e,c as s,o as a,U as o}from"./chunks/framework.e548c890.js";const y=JSON.parse('{"title":"useContext","description":"","frontmatter":{},"headers":[],"relativePath":"fe/react/react/hooks/use-context.md","filePath":"fe/react/react/hooks/use-context.md","lastUpdated":1702821351000}'),t={name:"fe/react/react/hooks/use-context.md"},l=o('<h1 id="usecontext" tabindex="-1">useContext <a class="header-anchor" href="#usecontext" aria-label="Permalink to &quot;useContext&quot;">​</a></h1><p>传递数据给下层组件。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useContext</span><span style="color:#A6ACCD;">(SomeContext)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="context" tabindex="-1">context <a class="header-anchor" href="#context" aria-label="Permalink to &quot;context&quot;">​</a></h2><p>某些情况下通过 prop 传递数据会很麻烦：</p><ul><li>透过多层组件传递数据给深层组件</li><li>多个下层组件需要相同的数据</li></ul><p>context 可以解决这个问题：</p><ol><li>使用 <code>createContext</code> 创建一个 context，提供默认值</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> SomeContext </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createContext</span><span style="color:#A6ACCD;">(defaultValue)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><ol start="2"><li>提供数据的组件内，用 <code>SomeContext.Provider</code> 包裹子元素，通过 <code>value</code> 属性提供数据</li></ol><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">SomeContext.Provider</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">value</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">}&gt;{</span><span style="color:#676E95;font-style:italic;">/* 后代组件 */</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#FFCB6B;">SomeContext.Provider</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><ol start="3"><li>接收数据的后代组件内，用 <code>useContext(SomeContext)</code> 得到数据</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useContext</span><span style="color:#A6ACCD;">(SomeContext)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="结合-reducer" tabindex="-1">结合 reducer <a class="header-anchor" href="#结合-reducer" aria-label="Permalink to &quot;结合 reducer&quot;">​</a></h2><p>对于一些复杂状态的管理会用到 reducer，context 提供了传递数据的能力，只需要传递 <code>useReducer</code> 返回的 <code>state</code> 和 <code>dispatch</code> 即可实现后代组件对复杂状态的共享读写。</p><p>类似的，对于一些简单的状态则传递 <code>useState</code> 返回的 <code>state</code> 和 <code>setState</code>。</p><h2 id="用途" tabindex="-1">用途 <a class="header-anchor" href="#用途" aria-label="Permalink to &quot;用途&quot;">​</a></h2><ol><li>主题切换，比如暗黑模式</li><li>当前登录的用户信息</li><li>当前路由信息，路由库会用到</li></ol>',18),n=[l];function c(p,r,i,d,u,C){return a(),s("div",null,n)}const x=e(t,[["render",c]]);export{y as __pageData,x as default};
