import{_ as s,c as l,o as a,a as o}from"./app.e3dff596.js";const h=JSON.parse('{"title":"Symbol","description":"","frontmatter":{},"headers":[{"level":2,"title":"创建 Symbol","slug":"创建-symbol","link":"#创建-symbol","children":[]},{"level":2,"title":"toString()","slug":"tostring","link":"#tostring","children":[]},{"level":2,"title":"隐藏符号属性","slug":"隐藏符号属性","link":"#隐藏符号属性","children":[]},{"level":2,"title":"全局 Symbol","slug":"全局-symbol","link":"#全局-symbol","children":[]},{"level":2,"title":"系统 Symbol","slug":"系统-symbol","link":"#系统-symbol","children":[]}],"relativePath":"fe/js/symbol.md"}'),e={name:"fe/js/symbol.md"},n=o(`<h1 id="symbol" tabindex="-1">Symbol <a class="header-anchor" href="#symbol" aria-hidden="true">#</a></h1><p>Symbol 表示唯一的标识符。每个 Symbol 类型的值都是唯一的。</p><h2 id="创建-symbol" tabindex="-1">创建 Symbol <a class="header-anchor" href="#创建-symbol" aria-hidden="true">#</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">([desc])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><ul><li><code>desc</code>：描述字符串，只是方便调试，并不代表使用相同的 desc 创建出的 Symbol 相同 <ul><li>使用 <code>id.description</code> 访问描述字符串</li></ul></li></ul><h2 id="tostring" tabindex="-1">toString() <a class="header-anchor" href="#tostring" aria-hidden="true">#</a></h2><p>避免引起混乱，Symbol 不会自动转为字符串，需要显式调用 <code>toString()</code> 方法。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">id</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(id</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// Symbol(id)</span></span>
<span class="line"></span></code></pre></div><h2 id="隐藏符号属性" tabindex="-1">隐藏符号属性 <a class="header-anchor" href="#隐藏符号属性" aria-hidden="true">#</a></h2><p>由于每个 Symbol 值都是唯一的，外界除了遍历所有 Symbol 属性外，很难直接覆盖一个已有的 Symbol 属性，因为外界很难拿到属性名。</p><p>在 <code>for...in</code>、<code>Object.keys()</code> 中只会列出字符串属性，不会列出符号属性。</p><p>可以使用 <code>Object.getOwnPropertySymbols()</code> 列出所有 Symbol 自有属性，或使用 <code>Reflect.ownKeys()</code> 列出所有自有属性 (包括字符串和 Symbol)。</p><h2 id="全局-symbol" tabindex="-1">全局 Symbol <a class="header-anchor" href="#全局-symbol" aria-hidden="true">#</a></h2><p>如果需要每个字符串对应一个 Symbol，可以使用全局注册的 Symbol。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Symbol</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">for</span><span style="color:#A6ACCD;">(key)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><ul><li><code>key</code>：描述字符串，但是全局 Symbol 的一个描述字符串对应一个 Symbol</li></ul><p>使用相同的 <code>key</code> 总会返回相同的 Symbol，第一次调用时创建，后续调用返回相同的值。</p><p>也可以根据 Symbol 返回 key：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> key </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Symbol</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keyFor</span><span style="color:#A6ACCD;">(id)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="系统-symbol" tabindex="-1">系统 Symbol <a class="header-anchor" href="#系统-symbol" aria-hidden="true">#</a></h2><p>内建对象也大量使用了 Symbol 作为属性名，避免属性被覆盖。</p><ul><li><code>Symbol.hasInstance</code></li><li><code>Symbol.isConcatSpreadable</code></li><li><code>Symbol.iterator</code></li><li><code>Symbol.toPrimitive</code></li><li>...</li></ul>`,22),t=[n];function p(c,i,r,y,d,b){return a(),l("div",null,t)}const A=s(e,[["render",p]]);export{h as __pageData,A as default};
