import{_ as e,c as l,o as t,d as i}from"./app.b2b4ff33.js";const g=JSON.parse('{"title":"优先级","description":"","frontmatter":{},"headers":[{"level":2,"title":"特异性","slug":"特异性","link":"#特异性","children":[]}],"relativePath":"fe/basic/css/priority.md","lastUpdated":1680318810000}'),o={name:"fe/basic/css/priority.md"},c=i('<h1 id="优先级" tabindex="-1">优先级 <a class="header-anchor" href="#优先级" aria-hidden="true">#</a></h1><p>有 3 种方式使用 CSS：</p><ul><li>外链：<code>&lt;link ref=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;</code></li><li>嵌入：<code>&lt;style&gt; ... &lt;/style&gt;</code></li><li>内联：<code>&lt;p style=&quot;...&quot;&gt;&lt;/p&gt;</code></li></ul><p>开发中为了书写的方便，样式的设置经常会有重叠，一个元素可能匹配到多条不同的规则。浏览器会根据样式的引入方式、选择器的种类和个数确定最终应用哪条规则。</p><p>优先级从高到低：</p><ul><li><code>!important</code>：加上这个关键字可以覆盖其他所有样式，最终应用这条样式</li><li>内联样式：内联样式的优先级高于选择器样式</li><li>外链和嵌入样式：计算特异性 (specificity) 确定优先级</li></ul><h2 id="特异性" tabindex="-1">特异性 <a class="header-anchor" href="#特异性" aria-hidden="true">#</a></h2><p>根据选择器的重要程度、具体程度、与元素的相关程度，将已有的 7 种选择器分为 4 个大类：</p><ul><li><strong>ID</strong><ul><li>ID 选择器</li></ul></li><li><strong>CLASS</strong><ul><li>类选择器</li><li>伪类选择器</li><li>属性选择器</li></ul></li><li><strong>TYPE</strong><ul><li>标签选择器</li><li>伪元素选择器</li></ul></li><li>No value <ul><li>通配选择器 <code>*</code></li><li>伪类选择器 <code>where()</code></li></ul></li></ul><p>多个选择器可以通过 <code>&lt;空白&gt;</code>、<code>&gt;</code>、<code>+</code> 等方式进行组合，不同组合方式的具体程度可能不同。比如 <code>&gt;</code> 严格为直接后代，而 <code>&lt;空白&gt;</code> 指的是所有后代。但事实上特异性的计算不考虑选择器的组合方式，只计算个数。</p><p>对于 CSS 文件中的一组规则，分别计算 ID、CLASS、TYPE 三种大类选择器的个数，写成 <code>ID - CLASS - TYPE</code> 的格式，就是最终计算出的特异性的值。</p><p>比较特异性时从高到低比较，也可以认为 ID 的值是 100、CLASS 的值是 10、TYPE 的值是 1，加权求和再比较即可。</p>',12),d=[c];function s(r,a,n,p,u,_){return t(),l("div",null,d)}const S=e(o,[["render",s]]);export{g as __pageData,S as default};
