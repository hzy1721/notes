import{_ as e,c as o,o as a,U as t}from"./chunks/framework.e548c890.js";const _=JSON.parse('{"title":"内置指令","description":"","frontmatter":{},"headers":[],"relativePath":"fe/vue/vue/built-in-directives.md","filePath":"fe/vue/vue/built-in-directives.md","lastUpdated":1702822707000}'),i={name:"fe/vue/vue/built-in-directives.md"},d=t('<h1 id="内置指令" tabindex="-1">内置指令 <a class="header-anchor" href="#内置指令" aria-label="Permalink to &quot;内置指令&quot;">​</a></h1><h2 id="v-if-和-v-show" tabindex="-1">v-if 和 v-show <a class="header-anchor" href="#v-if-和-v-show" aria-label="Permalink to &quot;v-if 和 v-show&quot;">​</a></h2><ul><li>v-if：切换会导致组件的销毁和重建，懒加载。</li><li>v-show：始终渲染，切换 <code>display: none</code>。</li></ul><p>频繁切换用 v-show 更好。</p><h2 id="v-for" tabindex="-1">v-for <a class="header-anchor" href="#v-for" aria-label="Permalink to &quot;v-for&quot;">​</a></h2><h3 id="key" tabindex="-1">key <a class="header-anchor" href="#key" aria-label="Permalink to &quot;key&quot;">​</a></h3><p>没有 <code>key</code> 的情况下，Vue 会尽可能复用 DOM 元素，然后执行 “就地更新”，在剩余元素的位置渲染新值。</p><p>如果数组变化频繁，最好给每个元素设置一个 ID，使用 <code>key</code> 属性标识，字符串或数字类型。</p><p>有了 <code>key</code>，Vue 就可以<strong>最高效</strong>地重新排列元素、新增/删除元素，避免不必要的操作。</p><p>在组件上设置 <code>key</code> 也可以用于强制重新创建组件，触发生命周期钩子，或者触发过渡效果。</p><h2 id="v-model" tabindex="-1">v-model <a class="header-anchor" href="#v-model" aria-label="Permalink to &quot;v-model&quot;">​</a></h2><p>表单输入元素：绑定 <code>value</code> 属性和 <code>input</code> 事件。</p><ul><li><code>&lt;input&gt;</code></li><li><code>&lt;select&gt;</code></li><li><code>&lt;textarea&gt;</code></li></ul><p>组件：绑定 <code>modelValue</code> 属性和 <code>update:modelValue</code> 事件。</p>',14),l=[d];function c(r,s,n,h,u,v){return a(),o("div",null,l)}const f=e(i,[["render",c]]);export{_ as __pageData,f as default};
