import{_ as e,c as a,o as r,a1 as s}from"./chunks/framework.mNpZ2GHZ.js";const i="/assets/array-buffer.DLyJ0iLv.png",_=JSON.parse('{"title":"ArrayBuffer","description":"","frontmatter":{},"headers":[],"relativePath":"fe/lang/js/binary/array-buffer.md","filePath":"fe/lang/js/binary/array-buffer.md","lastUpdated":1702822707000}'),t={name:"fe/lang/js/binary/array-buffer.md"},o=s(`<h1 id="arraybuffer" tabindex="-1">ArrayBuffer <a class="header-anchor" href="#arraybuffer" aria-label="Permalink to &quot;ArrayBuffer&quot;">​</a></h1><p><code>ArrayBuffer</code> 是一种二进制对象，引用固定长度的连续内存空间。</p><p>创建 <code>ArrayBuffer</code>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// byteLength 字节，用 0 填充</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArrayBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(byteLength);</span></span></code></pre></div><p><code>ArrayBuffer</code> 无法直接访问，需要通过视图对象进行操作。</p><p>有 2 类视图对象：</p><ul><li><code>TypedArray</code>：将字节解释为不同类型的数组，包含若干类型 <ul><li>不存在 <code>TypedArray</code> 构造函数，只是一个概念上的统称</li></ul></li><li><code>DataView</code>： <ul><li><code>TypedArray</code> 只能将整个 <code>ArrayBuffer</code> 解释为一种类型</li><li><code>DataView</code> 支持将 <code>ArrayBuffer</code> 的不同部分解释为不同的类型</li></ul></li></ul><p><img src="`+i+'" alt=""></p>',8),d=[o];function l(n,c,p,f,u,y){return r(),a("div",null,d)}const b=e(t,[["render",l]]);export{_ as __pageData,b as default};
