import{_ as s,c as l,o as a,U as n}from"./chunks/framework.e548c890.js";const C=JSON.parse('{"title":"Profiler","description":"","frontmatter":{},"headers":[],"relativePath":"fe/react/react/components/profiler.md","filePath":"fe/react/react/components/profiler.md","lastUpdated":1702822707000}'),e={name:"fe/react/react/components/profiler.md"},o=n(`<h1 id="profiler" tabindex="-1">Profiler <a class="header-anchor" href="#profiler" aria-label="Permalink to &quot;Profiler&quot;">​</a></h1><p>测量组件树的渲染性能。</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Profiler</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">App</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onRender</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">onRender</span><span style="color:#89DDFF;">}&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">App</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Profiler</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>prop：</p><ul><li><code>id</code>：组件树的 ID</li><li><code>onRender</code>：组件树内组件每次渲染时触发，参数为渲染的性能信息</li></ul><p>警告：</p><ul><li><code>&lt;Profiler&gt;</code> 有额外的性能开销，生产环境默认关闭，需要修改打包配置手动开启</li></ul><p>onRender：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onRender</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">id</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">phase</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">actualDuration</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">baseDuration</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">startTime</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">commitTime</span></span>
<span class="line"><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Aggregate or log render timings...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li><code>id</code>：组件树 ID</li><li><code>phase</code>：组件生命周期阶段，有 3 种取值 <ul><li><code>&#39;mount&#39;</code>：第一次渲染挂载</li><li><code>&#39;update&#39;</code>：后续渲染更新</li><li><code>&#39;nested-update&#39;</code>：</li></ul></li><li><code>actualDuration</code>：组件树更新耗时 (ms) <ul><li>通常第一次渲染耗时最长，后续只需要重新渲染部分组件，耗时会少很多</li></ul></li><li><code>baseDuraction</code>：整个组件树渲染耗时的估计值 (ms) <ul><li>累加所有组件最近一次的渲染耗时，作为耗时的上界</li><li>与 <code>actualDuration</code> 比较，观察缓存是否有效果</li></ul></li><li><code>startTime</code>：渲染开始的时间戳</li><li><code>endTime</code>：渲染结束的时间戳 (commit) <ul><li>同一批 commit 的组件树们 <code>endTime</code> 相同</li></ul></li></ul>`,10),p=[o];function t(c,r,i,d,D,y){return a(),l("div",null,p)}const A=s(e,[["render",t]]);export{C as __pageData,A as default};
