import{_ as e,c as s,o as l,a1 as i}from"./chunks/framework.mNpZ2GHZ.js";const _=JSON.parse('{"title":"useSyncExternalStore","description":"","frontmatter":{},"headers":[],"relativePath":"fe/react/react/hooks/use-sync-external-store.md","filePath":"fe/react/react/hooks/use-sync-external-store.md","lastUpdated":1702822707000}'),t={name:"fe/react/react/hooks/use-sync-external-store.md"},a=i('<h1 id="usesyncexternalstore" tabindex="-1">useSyncExternalStore <a class="header-anchor" href="#usesyncexternalstore" aria-label="Permalink to &quot;useSyncExternalStore&quot;">​</a></h1><p>订阅外部数据。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> snapshot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useSyncExternalStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(subscribe, getSnapshot, getServerSnapshot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>参数：</p><ul><li><code>subscribe</code>：订阅函数 <ul><li>接收 <code>callback</code> 参数</li><li>内部实现当数据变化时调用 <code>callback</code>，从而触发组件重新渲染</li><li>返回 cleanup 函数，用于取消订阅</li></ul></li><li><code>getSnapshot</code>：返回数据的快照，快照变化会导致组件重新渲染</li><li><code>getServerSnapshot</code>：返回数据的初始快照，用于 SSR</li></ul><p>返回值：</p><ul><li><code>snapshot</code>：数据的当前快照</li></ul><p>警告：</p><ul><li><code>subscribe</code> 的改变会导致取消和重新订阅 <ul><li>如果使用组件内函数，会导致每次渲染都触发订阅</li><li>需要使用组件外函数或 <code>useCallback</code> 缓存组件内函数</li></ul></li><li><code>getSnapshot</code> 返回的快照不能每次都不一样，会造成无限循环 <ul><li>比如返回一个对象字面量</li></ul></li><li><code>getSnapshot</code> 返回的快照必须是不可变的 <ul><li>修改快照不会导致真正的数据改变</li><li>如果数据没有改变，每次调用返回的快照都相同</li></ul></li><li>通常把外部数据的管理逻辑封装为一个自定义 hook</li></ul><p>用途：</p><ul><li>订阅外部数据 (可能随时间变化) <ul><li>第三方状态管理库</li><li>浏览器 API</li></ul></li></ul>',11),o=[a];function c(n,r,p,d,h,u){return l(),s("div",null,o)}const S=e(t,[["render",c]]);export{_ as __pageData,S as default};
