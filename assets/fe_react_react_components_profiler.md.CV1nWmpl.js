import{_ as s,c as i,o as a,a1 as e}from"./chunks/framework.mNpZ2GHZ.js";const g=JSON.parse('{"title":"Profiler","description":"","frontmatter":{},"headers":[],"relativePath":"fe/react/react/components/profiler.md","filePath":"fe/react/react/components/profiler.md","lastUpdated":1702822707000}'),l={name:"fe/react/react/components/profiler.md"},n=e(`<h1 id="profiler" tabindex="-1">Profiler <a class="header-anchor" href="#profiler" aria-label="Permalink to &quot;Profiler&quot;">​</a></h1><p>测量组件树的渲染性能。</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Profiler</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;App&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onRender</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{onRender}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Profiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>prop：</p><ul><li><code>id</code>：组件树的 ID</li><li><code>onRender</code>：组件树内组件每次渲染时触发，参数为渲染的性能信息</li></ul><p>警告：</p><ul><li><code>&lt;Profiler&gt;</code> 有额外的性能开销，生产环境默认关闭，需要修改打包配置手动开启</li></ul><p>onRender：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onRender</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  phase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  actualDuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  baseDuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  startTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  commitTime</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Aggregate or log render timings...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>id</code>：组件树 ID</li><li><code>phase</code>：组件生命周期阶段，有 3 种取值 <ul><li><code>&#39;mount&#39;</code>：第一次渲染挂载</li><li><code>&#39;update&#39;</code>：后续渲染更新</li><li><code>&#39;nested-update&#39;</code>：</li></ul></li><li><code>actualDuration</code>：组件树更新耗时 (ms) <ul><li>通常第一次渲染耗时最长，后续只需要重新渲染部分组件，耗时会少很多</li></ul></li><li><code>baseDuraction</code>：整个组件树渲染耗时的估计值 (ms) <ul><li>累加所有组件最近一次的渲染耗时，作为耗时的上界</li><li>与 <code>actualDuration</code> 比较，观察缓存是否有效果</li></ul></li><li><code>startTime</code>：渲染开始的时间戳</li><li><code>endTime</code>：渲染结束的时间戳 (commit) <ul><li>同一批 commit 的组件树们 <code>endTime</code> 相同</li></ul></li></ul>`,10),t=[n];function p(h,d,o,r,k,c){return a(),i("div",null,t)}const u=s(l,[["render",p]]);export{g as __pageData,u as default};
