import{_ as l,c as e,o as i,U as a}from"./chunks/framework.e548c890.js";const f=JSON.parse('{"title":"版本","description":"","frontmatter":{},"headers":[],"relativePath":"fe/react-stack/react/version-history.md","filePath":"fe/react-stack/react/version-history.md","lastUpdated":1697165423000}'),t={name:"fe/react-stack/react/version-history.md"},r=a('<h1 id="版本" tabindex="-1">版本 <a class="header-anchor" href="#版本" aria-label="Permalink to &quot;版本&quot;">​</a></h1><h2 id="react-18-0-2022-03" tabindex="-1">React 18.0 (2022.03) <a class="header-anchor" href="#react-18-0-2022-03" aria-label="Permalink to &quot;React 18.0 (2022.03)&quot;">​</a></h2><p>新特性：</p><ol><li>并发渲染 (Concurrent Rendering) <ul><li>只对新特性开启，包括 Transition、Suspense、streaming SSR</li><li>渲染是可中断的，避免耗时更新阻塞 UI</li></ul></li><li>Transition <ul><li>为了区分紧急更新 (urgent) 和非紧急更新 (transition)</li><li>用 startTransition 包裹不紧急的更新，可以被紧急更新打断</li><li>transition 被中断后，React 会丢弃已经渲染的部分，恢复后直接渲染最新的状态</li><li>useTransition 返回 isPending 和 startTransition，标识是否正在等待渲染</li></ul></li><li>Suspense <ul><li>支持服务端和并发渲染</li><li>可以在框架中使用，比如 Next/Remix/Hydrogen/Relay</li></ul></li><li>React DOM <ul><li>Client <ul><li>react-dom/client</li><li>createRoot 代替 ReactDOM.render</li><li>hydrateRoot 代替 ReactDOM.hydrate</li><li>新参数 onRecoverableError</li></ul></li><li>Server <ul><li>react-dom/server</li><li>支持 streaming Suspense</li><li>renderToPipeableStream：Node 环境 streaming</li><li>renderToReadableStream：Deno/Cloudflare 环境 streaming</li><li>renderToString 不再推荐使用</li></ul></li></ul></li><li>自动合并 (Auto Batching) <ul><li>合并多次状态更新为一次 re-render</li><li>旧版本：只合并事件处理函数内的更新</li><li>新版本：所有更新都会自动合并</li></ul></li><li>StrictMode <ul><li>组件第一次挂载时，会额外 unmount 和 mount 一次</li><li>第二次 mount 使用与第一次 mount 相同的状态</li><li>为了测试未来的新功能</li></ul></li><li>新 Hooks <ul><li>useId <ul><li>生成 client 和 server 一致的唯一 ID</li><li>主要用于组件库生成 a11y ID</li></ul></li><li>useDeferredValue <ul><li>deferredValue 更新导致的 re-render 可以被推迟和中断，避免阻塞 UI</li></ul></li><li>useSyncExternalStore <ul><li>并发地同步外部数据源，省去了自己用 useEffect 同步数据</li><li>主要用于库，而不是应用</li></ul></li><li>useInsertionEffect <ul><li>layout effect 执行前触发</li><li>用于 css-in-js 库</li></ul></li><li>useTransition <ul><li>上面提到过</li></ul></li></ul></li></ol><h2 id="react-17-0" tabindex="-1">React 17.0 <a class="header-anchor" href="#react-17-0" aria-label="Permalink to &quot;React 17.0&quot;">​</a></h2><p>没有新特性，对 React 做了一些改进，有一些 breaking changes。</p><ul><li>使 React 更容易升级</li><li>可以组合不同版本 React 输出的组件树</li><li>可以把 React 应用更容易地嵌入到其他技术栈的应用中</li></ul><p>破坏性更新：</p><ul><li>与浏览器行为对齐</li><li>移除事件池 (event pooling)</li></ul><p>bug 修复：</p><ul><li>forwardRef 和 memo 不允许返回 undefined</li></ul><h2 id="react-16-13" tabindex="-1">React 16.13 <a class="header-anchor" href="#react-16-13" aria-label="Permalink to &quot;React 16.13&quot;">​</a></h2><ul><li>新 warning <ul><li>渲染时更新其他组件</li><li>style 规则冲突</li><li>string ref</li><li>React.createFactory</li><li>ReactDOM.unstable_createPortal</li></ul></li><li>warning 信息添加组件堆栈 (stack trace)</li><li>bug 修复 <ul><li>严格模式 <ul><li>shouldComponentUpdate 执行两次</li><li>废弃 context API 的 warning 信息会包含组件堆栈</li></ul></li><li>disabled 的 button 不会触发 onMouseEnter</li><li>ReactDOM 添加 version 导出</li></ul></li></ul><h2 id="react-16-8" tabindex="-1">React 16.8 <a class="header-anchor" href="#react-16-8" aria-label="Permalink to &quot;React 16.8&quot;">​</a></h2><ul><li>支持 hooks</li></ul><h2 id="react-16-7" tabindex="-1">React 16.7 <a class="header-anchor" href="#react-16-7" aria-label="Permalink to &quot;React 16.7&quot;">​</a></h2><ul><li>bug 修复</li></ul><h2 id="react-16-6" tabindex="-1">React 16.6 <a class="header-anchor" href="#react-16-6" aria-label="Permalink to &quot;React 16.6&quot;">​</a></h2><ul><li>React.memo</li><li>React.lazy</li><li>新 context API</li></ul>',19),n=[r];function o(c,u,s,d,h,R){return i(),e("div",null,n)}const _=l(t,[["render",o]]);export{f as __pageData,_ as default};
